(()=>{"use strict";function e(e,t){t.length>0&&t.forEach((function(t){var n=Object.keys(t)[0],r=t[n];e.setAttribute(n,r)}))}var t={popupFormSelector:".popup__form",popupFormInputSelector:".popup__form-text",popupFormSubmitButtonSelector:".popup__form-submit-btn",popupWithFormSavingText:"Saving...",submitButtonDisabled:"popup__form-submit-btn_disabled",transparentMuchMore:["transparent","transparent_amount_much-more"],inputFieldError:"popup__form-text_type_error",inputErrorMessageActive:"popup__form-text-error_active",placesList:"places__list",cardTemplateSelector:"#placeCardTemplate",placeCardSelector:".place",placePhotoSelector:".place__photo",placeNameSelector:".place__name",placeDeleteBtnSelector:".place__remove-btn",placeLikeBtnSelector:".place__like-btn",placeNumberOfLikesSelector:".place__number-of-likes",placeLikeBtnSelectedClass:"place__like-btn_selected",escapeKeyCode:"Escape",popupCloseButtonSelector:".popup__container-close-btn",popupOpenedClass:"popup_opened",popupPhotoSelector:".popup__photo",popupPhotoDescriptionSelector:".popup__photo-description",photoPopupTemplateSelector:"#showPhoto",profileEditPopupTemplateSelector:"#editProfile",avatarEditPopupTemplateSelector:"#editAvatar",profileAddPopupTemplateSelector:"#addPlace",cardDeleteConfirmPopupTemplateSelector:"#confirmDelete",avatarEditInputName:"avatarUrl",profileAvatarEditButtonSelector:".profile__avatar-edit-button",profileAvatarSelector:".profile__pic",profileAddButtonSelector:".profile__add-button",profileInputNameName:"profileName",profileInputDescriptionName:"profileDescription",placeInputNameName:"placeName",placeInputUrlName:"placeUrl",profileNameSelector:".profile__name",profileDescriptionSelector:".profile__description"};function n(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var r=function r(o){var i=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,r),n(this,"_getCardFromTemplate",(function(){return document.querySelector(i._templateSelector).content.querySelector(t.placeCardSelector).cloneNode(!0)})),n(this,"delete",(function(){i._newPlaceCard.remove(),i._newPlaceCard=null})),n(this,"_handleDeleteClick",(function(){i._cardDeleteCallback(i,i._id)})),n(this,"_handleLikeClick",(function(){i._likeCallback(i,i._id,i._isLiked())})),n(this,"toggleLikeButton",(function(){i._likeButton.classList.toggle(t.placeLikeBtnSelectedClass)})),n(this,"_isLiked",(function(){return i._likes.find((function(e){return e._id===i._userId}))})),n(this,"_setEventListeners",(function(){i._userId===i._owner._id&&i._deleteButton.addEventListener("click",i._handleDeleteClick),i._likeButton.addEventListener("click",i._handleLikeClick),i._placePhoto.addEventListener("click",i._handleCardClick(i._photoAttributes,i._placeNameText))})),n(this,"_setNumberOfLikes",(function(){i._numberOfLikes.textContent=i._likes.length})),n(this,"setLikes",(function(e){i._likes=e,i._setNumberOfLikes()})),n(this,"generateCard",(function(){return i._newPlaceCard=i._getCardFromTemplate(),i._placePhoto=i._newPlaceCard.querySelector(t.placePhotoSelector),e(i._placePhoto,i._photoAttributes),i._placeName=i._newPlaceCard.querySelector(t.placeNameSelector),i._placeName.textContent="".concat(i._placeNameText),i._deleteButton=i._newPlaceCard.querySelector(t.placeDeleteBtnSelector),i._userId!=i._owner._id&&(i._deleteButton.remove(),i._deleteButton=null),i._likeButton=i._newPlaceCard.querySelector(t.placeLikeBtnSelector),i._numberOfLikes=i._newPlaceCard.querySelector(t.placeNumberOfLikesSelector),i._setNumberOfLikes(),i._isLiked()&&i.toggleLikeButton(),i._setEventListeners(),i._newPlaceCard})),this._placeNameText=o.name,this._imageUrl=o.link,this._photoAttributes=[{src:this._imageUrl},{alt:"фото ".concat(this._placeNameText)}],this._templateSelector=o.templateSelector,this._handleCardClick=o.handleCardClick,this._cardDeleteCallback=o.cardDeleteCallback,this._owner=o.owner,this._id=o._id,this._userId=o.userId,this._likes=o.likes,this._likeCallback=o.cardLikeCallback};function o(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var i=function(){function e(t,n){var r=t.items,o=t.renderer;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._renderedItems=r,this._renderer=o,this._container=document.querySelector(n)}var t,n;return t=e,(n=[{key:"_clear",value:function(){this._container.innerHTML=""}},{key:"addItem",value:function(e){this._container.prepend(e)}},{key:"renderItems",value:function(){var e=this;this._clear(),this._renderedItems.forEach((function(t){e._renderer(t)}))}}])&&o(t.prototype,n),e}();function a(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function c(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var u=function(){function e(n){var r=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),c(this,"_handleEscClose",(function(e){e.key===t.escapeKeyCode&&r.close()})),c(this,"_handleSideClickClose",(function(e){e.target===e.currentTarget&&r.close()})),this._popup=document.querySelector(n),this._closeButton=this._popup.querySelector(t.popupCloseButtonSelector)}var n,r;return n=e,(r=[{key:"open",value:function(){this._popup.addEventListener("click",this._handleSideClickClose),window.addEventListener("keydown",this._handleEscClose),this._popup.classList.add(t.popupOpenedClass)}},{key:"close",value:function(){this._popup.classList.remove(t.popupOpenedClass),window.removeEventListener("keydown",this._handleEscClose),this._popup.removeEventListener("click",this._handleSideClickClose)}},{key:"setEventListeners",value:function(){var e=this;this._closeButton.addEventListener("click",(function(){return e.close()}))}}])&&a(n.prototype,r),e}();function l(e){return(l="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function s(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function p(e,t,n){return(p="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=h(e)););return e}(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(n):o.value}})(e,t,n||e)}function f(e,t){return(f=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function d(e,t){return!t||"object"!==l(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function h(e){return(h=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var m=function(n){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&f(e,t)}(u,n);var r,o,i,a,c=(i=u,a=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=h(i);if(a){var n=h(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return d(this,e)});function u(e){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,u),(n=c.call(this,e))._popupPhoto=n._popup.querySelector(t.popupPhotoSelector),n._popupPhotoDescription=n._popup.querySelector(t.popupPhotoDescriptionSelector),n.setEventListeners(),n}return r=u,(o=[{key:"open",value:function(t,n){e(this._popupPhoto,t),this._popupPhotoDescription.textContent=n,p(h(u.prototype),"open",this).call(this)}},{key:"close",value:function(){p(h(u.prototype),"close",this).call(this),this._popupPhotoDescription.textContent="",e(this._popupPhoto,[{src:""},{alt:""}])}}])&&s(r.prototype,o),u}(u);function _(e){return(_="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function y(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function b(e,t,n){return(b="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=g(e)););return e}(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(n):o.value}})(e,t,n||e)}function v(e,t){return(v=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function S(e,t){return!t||"object"!==_(t)&&"function"!=typeof t?k(e):t}function k(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function g(e){return(g=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var C=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&v(e,t)}(c,e);var n,r,o,i,a=(o=c,i=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=g(o);if(i){var n=g(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return S(this,e)});function c(e){var n,r=e.popupSelector,o=e.formSubmitCallback;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,c),(n=a.call(this,r))._popupForm=n._popup.querySelector(t.popupFormSelector),n._inputList=n._popupForm.querySelectorAll(t.popupFormInputSelector),n._formValues={},n._formSubmitCallback=o(k(n),n._formValues).bind(k(n)),n._submitButton=n._popup.querySelector(t.popupFormSubmitButtonSelector),n._submitButtonOriginalText=n._submitButton.textContent,n.setEventListeners(),n}return n=c,(r=[{key:"_getInputValues",value:function(){var e=this;this._inputList.forEach((function(t){return e._formValues[t.name]=t.value}))}},{key:"setInputValues",value:function(e){this._inputList.forEach((function(t){t.value=e[t.name]}))}},{key:"setEventListeners",value:function(){var e=this;b(g(c.prototype),"setEventListeners",this).call(this),this._popupForm.addEventListener("submit",(function(t){e._getInputValues(),e._formSubmitCallback(t)}))}},{key:"close",value:function(){b(g(c.prototype),"close",this).call(this),this._popupForm.reset()}},{key:"open",value:function(e){e(),b(g(c.prototype),"open",this).call(this)}},{key:"getForm",value:function(){return this._popupForm}},{key:"setSubmitButtonSavingText",value:function(e){this._submitButton.textContent=e?t.popupWithFormSavingText:this._submitButtonOriginalText}}])&&y(n.prototype,r),c}(u);function w(e){return function(e){if(Array.isArray(e))return P(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||function(e,t){if(e){if("string"==typeof e)return P(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?P(e,t):void 0}}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function P(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function E(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var O=function e(t,n){var r=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),E(this,"_disableSubmitButton",(function(){var e;r._submitButton.setAttribute("disabled","disabled"),(e=r._submitButton.classList).remove.apply(e,w(r._config.transparentMuchMore)),r._submitButton.classList.add(r._config.submitButtonDisabled)})),E(this,"_enableSubmitButton",(function(){var e;r._submitButton.classList.remove(r._config.submitButtonDisabled),(e=r._submitButton.classList).add.apply(e,w(r._config.transparentMuchMore)),r._submitButton.removeAttribute("disabled")})),E(this,"_showError",(function(e,t){e.textContent=t.validationMessage,t.classList.add(r._config.inputFieldError),e.classList.add(r._config.inputErrorMessageActive)})),E(this,"_hideError",(function(e,t){t.classList.remove(r._config.inputFieldError),e.classList.remove(r._config.inputErrorMessageActive),e.textContent=""})),E(this,"_hideErrorAll",(function(){r._inputs.forEach((function(e,t){r._hideError(r._errors[t],e)}))})),E(this,"_checkInputValidity",(function(e,t){e.validity.valid?r._hideError(t,e):r._showError(t,e)})),E(this,"_checkInputValidityAll",(function(){return r._inputs.every((function(e){return e.validity.valid}))})),E(this,"_setSubmitState",(function(){r._checkInputValidityAll()?r._enableSubmitButton():r._disableSubmitButton()})),E(this,"clearFormValidation",(function(){r._hideErrorAll(),r._disableSubmitButton()})),E(this,"enableValidation",(function(){r._inputs.forEach((function(e){var t=r._form.querySelector(".".concat(e.id,"-error"));e.addEventListener("input",(function(e){r._checkInputValidity(e.target,t),r._setSubmitState()}))}))})),this._config=t,this._form=n,this._submitButton=this._form.querySelector(this._config.popupFormSubmitButtonSelector),this._inputs=Array.from(this._form.querySelectorAll(this._config.popupFormInputSelector)),this._errors=this._inputs.map((function(e){return r._form.querySelector(".".concat(e.id,"-error"))}))};function L(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function I(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var B=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._profileName=document.querySelector(t.profileNameSelector),this._profileDescription=document.querySelector(t.profileDescriptionSelector),this._avatar=document.querySelector(t.profileAvatarSelector),this._id=t._id,this.setUserAvatar(t.avatar)}var n,r;return n=e,(r=[{key:"getUserInfo",value:function(){var e;return L(e={},t.profileInputNameName,this._profileName.textContent),L(e,t.profileInputDescriptionName,this._profileDescription.textContent),L(e,"userId",this._id),e}},{key:"setUserInfo",value:function(e){this._profileName.textContent=e.name,this._profileDescription.textContent=e.description}},{key:"setUserAvatar",value:function(e){this._avatar.src=e}}])&&I(n.prototype,r),e}();function T(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var A=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.baseUrl=t.baseUrl,this.headers=t.headers}var t,n;return t=e,(n=[{key:"_fetchPath",value:function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},r={method:t,headers:this.headers};return"POST"!==t&&"PATCH"!==t||(r.body=JSON.stringify(n)),fetch("".concat(this.baseUrl).concat(e),r).then((function(e){return e.ok?e.json():Promise.reject("Error: ".concat(e.status))}))}},{key:"getUserInfo",value:function(){return this._fetchPath("users/me","GET")}},{key:"setUserInfo",value:function(e){var t=e.name,n=e.about;return this._fetchPath("users/me","PATCH",{name:t,about:n})}},{key:"setUserAvatar",value:function(e){return this._fetchPath("users/me/avatar","PATCH",{avatar:e})}},{key:"getInitialCards",value:function(){return this._fetchPath("cards","GET")}},{key:"addCard",value:function(e){var t=e.name,n=e.link;return this._fetchPath("cards","POST",{name:t,link:n})}},{key:"deleteCard",value:function(e){return this._fetchPath("cards/".concat(e),"DELETE")}},{key:"likeCard",value:function(e){return this._fetchPath("cards/likes/".concat(e),"PUT")}},{key:"unlikeCard",value:function(e){return this._fetchPath("cards/likes/".concat(e),"DELETE")}}])&&T(t.prototype,n),e}();function j(e){return(j="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function N(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function D(e,t,n){return(D="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=U(e)););return e}(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(n):o.value}})(e,t,n||e)}function x(e,t){return(x=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function F(e,t){return!t||"object"!==j(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function U(e){return(U=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var R=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&x(e,t)}(c,e);var n,r,o,i,a=(o=c,i=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=U(o);if(i){var n=U(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return F(this,e)});function c(e){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,c),(n=a.call(this,e))._popupForm=n._popup.querySelector(t.popupFormSelector),n._submitHandler=null,n.setEventListeners(),n}return n=c,(r=[{key:"setSubmitHandler",value:function(e){this._submitHandler=e}},{key:"close",value:function(){D(U(c.prototype),"close",this).call(this),this._submitHandler=null}},{key:"setEventListeners",value:function(){var e=this;D(U(c.prototype),"setEventListeners",this).call(this),this._popupForm.addEventListener("submit",(function(t){return e._submitHandler(t)}))}}])&&N(n.prototype,r),c}(u);function q(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function V(e,n,o,i,a){var c;e.templateSelector=t.cardTemplateSelector,e.handleCardClick=(c=M,function(e,t){return function(){c.open(e,t)}}),e.cardDeleteCallback=function(e,t){return function(n,r){t.setSubmitHandler((function(o){o.preventDefault(),e.deleteCard(r).then((function(e){n.delete(),t.close()})).catch((function(e){return console.log(e)})).finally(t.setSubmitHandler(null))})),t.open()}}(o,a),e.cardLikeCallback=function(e){return function(t,n,r){(r?e.unlikeCard(n):e.likeCard(n)).then((function(e){t.toggleLikeButton(),t.setLikes(e.likes)})).catch((function(e){return console.log(e)}))}}(o),e.userId=i.getUserInfo().userId;var u=new r(e);n.addItem(u.generateCard())}var M=new m(t.photoPopupTemplateSelector);function H(e){return function(t,n){return function(r){r.preventDefault(),e(t,n)}}}function G(e,t){return function(n,r){n.setSubmitButtonSavingText(!0),e(r).then((function(e){t(r,e),n.close()})).catch((function(e){return console.log(e)})).finally((function(){n.setSubmitButtonSavingText(!1)}))}}function K(e){var n=new O(t,e);return n.enableValidation(),n}var W=new A({baseUrl:"https://mesto.nomoreparties.co/v1/cohort-25/",headers:{authorization:"d8d84bac-32d7-42f9-a622-bbe14f1aa9f5","Content-Type":"application/json"}});Promise.all([W.getUserInfo(),W.getInitialCards()]).then((function(e){var n,r,o=(r=2,function(e){if(Array.isArray(e))return e}(n=e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,i=[],a=!0,c=!1;try{for(n=n.call(e);!(a=(r=n.next()).done)&&(i.push(r.value),!t||i.length!==t);a=!0);}catch(e){c=!0,o=e}finally{try{a||null==n.return||n.return()}finally{if(c)throw o}}return i}}(n,r)||function(e,t){if(e){if("string"==typeof e)return q(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?q(e,t):void 0}}(n,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),a=o[0],c=o[1];a.profileNameSelector=t.profileNameSelector,a.profileDescriptionSelector=t.profileDescriptionSelector,a.profileAvatarSelector=t.profileAvatarSelector;var u=new B(a);u.setUserInfo({name:a.name,description:a.about});var l=H(G((function(e){return W.setUserInfo({name:e[t.profileInputNameName],about:e[t.profileInputDescriptionName]})}),(function(e,n){u.setUserInfo({name:e[t.profileInputNameName],description:e[t.profileInputDescriptionName]})}))),s=new C({popupSelector:t.profileEditPopupTemplateSelector,formSubmitCallback:l}),p=K(s.getForm());document.querySelector(".profile__edit-button").addEventListener("click",(function(){return s.open((function(){p.clearFormValidation(),s.setInputValues(u.getUserInfo())}))}));var f=H(G((function(e){return W.setUserAvatar(e[t.avatarEditInputName])}),(function(e,n){u.setUserAvatar(e[t.avatarEditInputName])}))),d=new C({popupSelector:t.avatarEditPopupTemplateSelector,formSubmitCallback:f}),h=K(d.getForm());document.querySelector(t.profileAvatarEditButtonSelector).addEventListener("click",(function(){return d.open((function(){return h.clearFormValidation()}))}));var m=new R(t.cardDeleteConfirmPopupTemplateSelector),_=new i({items:c.reverse(),renderer:function(e){return V(e,_,W,u,m)}},".".concat(t.placesList));_.renderItems();var y=H(G((function(e){return W.addCard({name:e[t.placeInputNameName],link:e[t.placeInputUrlName]})}),(function(e,t){V(t,_,W,u,m)}))),b=new C({popupSelector:t.profileAddPopupTemplateSelector,formSubmitCallback:y}),v=K(b.getForm());document.querySelector(t.profileAddButtonSelector).addEventListener("click",(function(){return b.open((function(){return v.clearFormValidation()}))}))})).catch((function(e){return console.log(e)}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tZXN0by8uL3NyYy91dGlscy91dGlscy5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL3NyYy91dGlscy9jb25zdGFudHMuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9zcmMvY29tcG9uZW50cy9DYXJkLmpzIiwid2VicGFjazovL21lc3RvLy4vc3JjL2NvbXBvbmVudHMvU2VjdGlvbi5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL3NyYy9jb21wb25lbnRzL1BvcHVwLmpzIiwid2VicGFjazovL21lc3RvLy4vc3JjL2NvbXBvbmVudHMvUG9wdXBXaXRoSW1hZ2UuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9zcmMvY29tcG9uZW50cy9Qb3B1cFdpdGhGb3JtLmpzIiwid2VicGFjazovL21lc3RvLy4vc3JjL2NvbXBvbmVudHMvRm9ybVZhbGlkYXRvci5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL3NyYy9jb21wb25lbnRzL1VzZXJJbmZvLmpzIiwid2VicGFjazovL21lc3RvLy4vc3JjL2NvbXBvbmVudHMvQXBpLmpzIiwid2VicGFjazovL21lc3RvLy4vc3JjL2NvbXBvbmVudHMvUG9wdXBDb25maXJtLmpzIiwid2VicGFjazovL21lc3RvLy4vc3JjL3BhZ2VzL2luZGV4LmpzIl0sIm5hbWVzIjpbInNldEVsZW1lbnRBdHRyaWJ1dGVzIiwiZWxlbWVudCIsImF0dHJpYnV0ZXMiLCJsZW5ndGgiLCJmb3JFYWNoIiwiYXR0ciIsImtleSIsIk9iamVjdCIsImtleXMiLCJ2YWx1ZSIsInNldEF0dHJpYnV0ZSIsImNvbmZpZyIsInBvcHVwRm9ybVNlbGVjdG9yIiwicG9wdXBGb3JtSW5wdXRTZWxlY3RvciIsInBvcHVwRm9ybVN1Ym1pdEJ1dHRvblNlbGVjdG9yIiwicG9wdXBXaXRoRm9ybVNhdmluZ1RleHQiLCJzdWJtaXRCdXR0b25EaXNhYmxlZCIsInRyYW5zcGFyZW50TXVjaE1vcmUiLCJpbnB1dEZpZWxkRXJyb3IiLCJpbnB1dEVycm9yTWVzc2FnZUFjdGl2ZSIsInBsYWNlc0xpc3QiLCJjYXJkVGVtcGxhdGVTZWxlY3RvciIsInBsYWNlQ2FyZFNlbGVjdG9yIiwicGxhY2VQaG90b1NlbGVjdG9yIiwicGxhY2VOYW1lU2VsZWN0b3IiLCJwbGFjZURlbGV0ZUJ0blNlbGVjdG9yIiwicGxhY2VMaWtlQnRuU2VsZWN0b3IiLCJwbGFjZU51bWJlck9mTGlrZXNTZWxlY3RvciIsInBsYWNlTGlrZUJ0blNlbGVjdGVkQ2xhc3MiLCJlc2NhcGVLZXlDb2RlIiwicG9wdXBDbG9zZUJ1dHRvblNlbGVjdG9yIiwicG9wdXBPcGVuZWRDbGFzcyIsInBvcHVwUGhvdG9TZWxlY3RvciIsInBvcHVwUGhvdG9EZXNjcmlwdGlvblNlbGVjdG9yIiwicGhvdG9Qb3B1cFRlbXBsYXRlU2VsZWN0b3IiLCJwcm9maWxlRWRpdFBvcHVwVGVtcGxhdGVTZWxlY3RvciIsImF2YXRhckVkaXRQb3B1cFRlbXBsYXRlU2VsZWN0b3IiLCJwcm9maWxlQWRkUG9wdXBUZW1wbGF0ZVNlbGVjdG9yIiwiY2FyZERlbGV0ZUNvbmZpcm1Qb3B1cFRlbXBsYXRlU2VsZWN0b3IiLCJhdmF0YXJFZGl0SW5wdXROYW1lIiwicHJvZmlsZUF2YXRhckVkaXRCdXR0b25TZWxlY3RvciIsInByb2ZpbGVBdmF0YXJTZWxlY3RvciIsInByb2ZpbGVBZGRCdXR0b25TZWxlY3RvciIsInByb2ZpbGVJbnB1dE5hbWVOYW1lIiwicHJvZmlsZUlucHV0RGVzY3JpcHRpb25OYW1lIiwicGxhY2VJbnB1dE5hbWVOYW1lIiwicGxhY2VJbnB1dFVybE5hbWUiLCJwcm9maWxlTmFtZVNlbGVjdG9yIiwicHJvZmlsZURlc2NyaXB0aW9uU2VsZWN0b3IiLCJDYXJkIiwiZGF0YSIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsIl90ZW1wbGF0ZVNlbGVjdG9yIiwiY29udGVudCIsImNsb25lTm9kZSIsIl9uZXdQbGFjZUNhcmQiLCJyZW1vdmUiLCJfY2FyZERlbGV0ZUNhbGxiYWNrIiwiX2lkIiwiX2xpa2VDYWxsYmFjayIsIl9pc0xpa2VkIiwiX2xpa2VCdXR0b24iLCJjbGFzc0xpc3QiLCJ0b2dnbGUiLCJfbGlrZXMiLCJmaW5kIiwibGlrZU9iaiIsIl91c2VySWQiLCJfb3duZXIiLCJfZGVsZXRlQnV0dG9uIiwiYWRkRXZlbnRMaXN0ZW5lciIsIl9oYW5kbGVEZWxldGVDbGljayIsIl9oYW5kbGVMaWtlQ2xpY2siLCJfcGxhY2VQaG90byIsIl9oYW5kbGVDYXJkQ2xpY2siLCJfcGhvdG9BdHRyaWJ1dGVzIiwiX3BsYWNlTmFtZVRleHQiLCJfbnVtYmVyT2ZMaWtlcyIsInRleHRDb250ZW50IiwibGlrZXMiLCJfc2V0TnVtYmVyT2ZMaWtlcyIsIl9nZXRDYXJkRnJvbVRlbXBsYXRlIiwiX3BsYWNlTmFtZSIsInRvZ2dsZUxpa2VCdXR0b24iLCJfc2V0RXZlbnRMaXN0ZW5lcnMiLCJ0aGlzIiwibmFtZSIsIl9pbWFnZVVybCIsImxpbmsiLCJzcmMiLCJhbHQiLCJ0ZW1wbGF0ZVNlbGVjdG9yIiwiaGFuZGxlQ2FyZENsaWNrIiwiY2FyZERlbGV0ZUNhbGxiYWNrIiwib3duZXIiLCJ1c2VySWQiLCJjYXJkTGlrZUNhbGxiYWNrIiwiU2VjdGlvbiIsImNvbnRhaW5lclNlbGVjdG9yIiwiaXRlbXMiLCJyZW5kZXJlciIsIl9yZW5kZXJlZEl0ZW1zIiwiX3JlbmRlcmVyIiwiX2NvbnRhaW5lciIsImlubmVySFRNTCIsInByZXBlbmQiLCJfY2xlYXIiLCJpdGVtIiwiUG9wdXAiLCJwb3B1cFNlbGVjdG9yIiwiZXZ0IiwiY2xvc2UiLCJ0YXJnZXQiLCJjdXJyZW50VGFyZ2V0IiwiX3BvcHVwIiwiX2Nsb3NlQnV0dG9uIiwiX2hhbmRsZVNpZGVDbGlja0Nsb3NlIiwid2luZG93IiwiX2hhbmRsZUVzY0Nsb3NlIiwiYWRkIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsIlBvcHVwV2l0aEltYWdlIiwiX3BvcHVwUGhvdG8iLCJfcG9wdXBQaG90b0Rlc2NyaXB0aW9uIiwic2V0RXZlbnRMaXN0ZW5lcnMiLCJwaG90b0Rlc2NyaXB0aW9uIiwiUG9wdXBXaXRoRm9ybSIsImZvcm1TdWJtaXRDYWxsYmFjayIsIl9wb3B1cEZvcm0iLCJfaW5wdXRMaXN0IiwicXVlcnlTZWxlY3RvckFsbCIsIl9mb3JtVmFsdWVzIiwiX2Zvcm1TdWJtaXRDYWxsYmFjayIsImJpbmQiLCJfc3VibWl0QnV0dG9uIiwiX3N1Ym1pdEJ1dHRvbk9yaWdpbmFsVGV4dCIsImlucHV0IiwidmFsdWVzIiwiX2dldElucHV0VmFsdWVzIiwicmVzZXQiLCJjdXN0b21PcGVuQ2FsbGJhY2siLCJzYXZpbmciLCJGb3JtVmFsaWRhdG9yIiwiZm9ybSIsIl9jb25maWciLCJyZW1vdmVBdHRyaWJ1dGUiLCJlcnJvckVsZW1lbnQiLCJ2YWxpZGF0aW9uTWVzc2FnZSIsIl9pbnB1dHMiLCJpbmRleCIsIl9oaWRlRXJyb3IiLCJfZXJyb3JzIiwidmFsaWRpdHkiLCJ2YWxpZCIsIl9zaG93RXJyb3IiLCJldmVyeSIsIl9jaGVja0lucHV0VmFsaWRpdHlBbGwiLCJfZW5hYmxlU3VibWl0QnV0dG9uIiwiX2Rpc2FibGVTdWJtaXRCdXR0b24iLCJfaGlkZUVycm9yQWxsIiwiX2Zvcm0iLCJpZCIsIl9jaGVja0lucHV0VmFsaWRpdHkiLCJfc2V0U3VibWl0U3RhdGUiLCJBcnJheSIsImZyb20iLCJtYXAiLCJVc2VySW5mbyIsImluZm8iLCJfcHJvZmlsZU5hbWUiLCJfcHJvZmlsZURlc2NyaXB0aW9uIiwiX2F2YXRhciIsInNldFVzZXJBdmF0YXIiLCJhdmF0YXIiLCJkZXNjcmlwdGlvbiIsInVybCIsIkFwaSIsIm9wdGlvbnMiLCJiYXNlVXJsIiwiaGVhZGVycyIsInBhdGgiLCJtZXRob2QiLCJib2R5IiwiZmV0Y2hPYmplY3QiLCJKU09OIiwic3RyaW5naWZ5IiwiZmV0Y2giLCJ0aGVuIiwicmVzIiwib2siLCJqc29uIiwiUHJvbWlzZSIsInJlamVjdCIsInN0YXR1cyIsIl9mZXRjaFBhdGgiLCJhYm91dCIsImNhcmRJZCIsIlBvcHVwQ29uZmlybSIsIl9zdWJtaXRIYW5kbGVyIiwiY2FsbGJhY2siLCJhZGRQbGFjZUNhcmQiLCJjYXJkRGF0YSIsImRlc3RpbmF0aW9uU2VjdGlvbiIsImFwaSIsInVzZXJJbmZvIiwiZGVsZXRlQ29uZmlybVBvcHVwIiwicG9wdXAiLCJwaG90b1BvcHVwIiwicGhvdG9BdHRyaWJ1dGVzIiwicGxhY2VOYW1lVGV4dCIsIm9wZW4iLCJjYXJkIiwic2V0U3VibWl0SGFuZGxlciIsInByZXZlbnREZWZhdWx0IiwiZGVsZXRlQ2FyZCIsImRlbGV0ZSIsImNhdGNoIiwiZXJyIiwiY29uc29sZSIsImxvZyIsImZpbmFsbHkiLCJtYWtlQ2FyZERlbGV0ZUNhbGxiYWNrIiwibGlrZWQiLCJ1bmxpa2VDYXJkIiwibGlrZUNhcmQiLCJzZXRMaWtlcyIsIm1ha2VDYXJkTGlrZUNhbGxiYWNrIiwiZ2V0VXNlckluZm8iLCJwbGFjZUNhcmQiLCJhZGRJdGVtIiwiZ2VuZXJhdGVDYXJkIiwibWFrZUZvcm1TdWJtaXRIYW5kbGVyIiwiZm9ybURhdGEiLCJtYWtlRm9ybVN1Ym1pdENhbGxiYWNrIiwiYXBpQ2FsbGJhY2siLCJ0aGVuQ2FsbGJhY2siLCJzZXRTdWJtaXRCdXR0b25TYXZpbmdUZXh0IiwicmVzdWx0IiwibWFrZUVuYWJsZWRWYWxpZGF0b3IiLCJ2YWxpZGF0b3IiLCJlbmFibGVWYWxpZGF0aW9uIiwiYXV0aG9yaXphdGlvbiIsImFsbCIsImdldEluaXRpYWxDYXJkcyIsImNhcmRzIiwicHJvZmlsZUluZm8iLCJzZXRVc2VySW5mbyIsInByb2ZpbGVFZGl0U3VibWl0SGFuZGxlciIsInByb2ZpbGVFZGl0UG9wdXAiLCJwcm9maWxlRWRpdFBvcHVwVmFsaWRhdG9yIiwiZ2V0Rm9ybSIsImNsZWFyRm9ybVZhbGlkYXRpb24iLCJzZXRJbnB1dFZhbHVlcyIsImF2YXRhckVkaXRTdWJtaXRIYW5kbGVyIiwiYXZhdGFyRWRpdFBvcHVwIiwiYXZhdGFyRWRpdFBvcHVwVmFsaWRhdG9yIiwiY2FyZERlbGV0ZUNvbmZpcm1Qb3B1cCIsInJldmVyc2UiLCJyZW5kZXJJdGVtcyIsInByb2ZpbGVBZGRTdWJtaXRIYW5kbGVyIiwiYWRkQ2FyZCIsInByb2ZpbGVBZGRQb3B1cCIsInByb2ZpbGVBZGRQb3B1cFZhbGlkYXRvciJdLCJtYXBwaW5ncyI6Im1CQUtBLFNBQVNBLEVBQXFCQyxFQUFTQyxHQUNqQ0EsRUFBV0MsT0FBUyxHQUN0QkQsRUFBV0UsU0FBUSxTQUFBQyxHQUNqQixJQUFNQyxFQUFNQyxPQUFPQyxLQUFLSCxHQUFNLEdBQ3hCSSxFQUFRSixFQUFLQyxHQUNuQkwsRUFBUVMsYUFBYUosRUFBS0csTUNWaEMsSUFBTUUsRUFBUyxDQUNiQyxrQkFBbUIsZUFDbkJDLHVCQUF3QixvQkFDeEJDLDhCQUErQiwwQkFDL0JDLHdCQUF5QixZQUN6QkMscUJBQXNCLGtDQUN0QkMsb0JBQXFCLENBQUMsY0FBZSxnQ0FDckNDLGdCQUFpQiw4QkFDakJDLHdCQUF5QixnQ0FDekJDLFdBQVksZUFDWkMscUJBQXNCLHFCQUN0QkMsa0JBQW1CLFNBQ25CQyxtQkFBb0IsZ0JBQ3BCQyxrQkFBbUIsZUFDbkJDLHVCQUF3QixxQkFDeEJDLHFCQUFzQixtQkFDdEJDLDJCQUE0QiwwQkFDNUJDLDBCQUEyQiwyQkFDM0JDLGNBQWUsU0FDZkMseUJBQTBCLDhCQUMxQkMsaUJBQWtCLGVBQ2xCQyxtQkFBb0IsZ0JBQ3BCQyw4QkFBK0IsNEJBQy9CQywyQkFBNEIsYUFDNUJDLGlDQUFrQyxlQUNsQ0MsZ0NBQWlDLGNBQ2pDQyxnQ0FBaUMsWUFDakNDLHVDQUF3QyxpQkFDeENDLG9CQUFxQixZQUNyQkMsZ0NBQWlDLCtCQUNqQ0Msc0JBQXVCLGdCQUN2QkMseUJBQTBCLHVCQUMxQkMscUJBQXNCLGNBQ3RCQyw0QkFBNkIscUJBQzdCQyxtQkFBb0IsWUFDcEJDLGtCQUFtQixXQUNuQkMsb0JBQXFCLGlCQUNyQkMsMkJBQTRCLHlCLHdIQ2xDdkIsSUFBTUMsRUFDWCxXQUFZQyxHQUFNLFksNEZBQUEsd0NBa0JLLFdBTXJCLE9BTG9CQyxTQUNqQkMsY0FBYyxFQUFLQyxtQkFDbkJDLFFBQ0FGLGNBQWN6QyxFQUFPVyxtQkFDckJpQyxXQUFVLE1BdkJHLGlCQThCVCxXQUNQLEVBQUtDLGNBQWNDLFNBQ25CLEVBQUtELGNBQWdCLFFBaENMLDZCQXNDRyxXQUNuQixFQUFLRSxvQkFBb0IsRUFBTSxFQUFLQyxRQXZDcEIsMkJBNkNDLFdBQ2pCLEVBQUtDLGNBQWMsRUFBTSxFQUFLRCxJQUFLLEVBQUtFLGVBOUN4QiwyQkFvREMsV0FDakIsRUFBS0MsWUFBWUMsVUFBVUMsT0FBT3JELEVBQU9pQiw4QkFyRHpCLG1CQTREUCxrQkFBTSxFQUFLcUMsT0FBT0MsTUFBSyxTQUFDQyxHQUFELE9BQWFBLEVBQVFSLE1BQVEsRUFBS1MsY0E1RGxELDZCQWlFRyxXQUNmLEVBQUtBLFVBQVksRUFBS0MsT0FBT1YsS0FDL0IsRUFBS1csY0FBY0MsaUJBQWlCLFFBQVMsRUFBS0Msb0JBQ3BELEVBQUtWLFlBQVlTLGlCQUFpQixRQUFTLEVBQUtFLGtCQUNoRCxFQUFLQyxZQUFZSCxpQkFBaUIsUUFBUyxFQUFLSSxpQkFBaUIsRUFBS0MsaUJBQWtCLEVBQUtDLG9CQXJFN0UsNEJBMkVFLFdBQ2xCLEVBQUtDLGVBQWVDLFlBQWMsRUFBS2QsT0FBTzlELFVBNUU5QixtQkFtRlAsU0FBQzZFLEdBQ1YsRUFBS2YsT0FBU2UsRUFDZCxFQUFLQyx1QkFyRlcsdUJBNEZILFdBd0JiLE9BdkJBLEVBQUt6QixjQUFnQixFQUFLMEIsdUJBRTFCLEVBQUtSLFlBQWMsRUFBS2xCLGNBQWNKLGNBQWN6QyxFQUFPWSxvQkFDM0R2QixFQUFxQixFQUFLMEUsWUFBYSxFQUFLRSxrQkFFNUMsRUFBS08sV0FBYSxFQUFLM0IsY0FBY0osY0FBY3pDLEVBQU9hLG1CQUMxRCxFQUFLMkQsV0FBV0osWUFBaEIsVUFBaUMsRUFBS0YsZ0JBR3RDLEVBQUtQLGNBQWdCLEVBQUtkLGNBQWNKLGNBQWN6QyxFQUFPYyx3QkFDekQsRUFBSzJDLFNBQVcsRUFBS0MsT0FBT1YsTUFDOUIsRUFBS1csY0FBY2IsU0FDbkIsRUFBS2EsY0FBZ0IsTUFHdkIsRUFBS1IsWUFBYyxFQUFLTixjQUFjSixjQUFjekMsRUFBT2Usc0JBQzNELEVBQUtvRCxlQUFpQixFQUFLdEIsY0FBY0osY0FBY3pDLEVBQU9nQiw0QkFDOUQsRUFBS3NELG9CQUNELEVBQUtwQixZQUNQLEVBQUt1QixtQkFFUCxFQUFLQyxxQkFFRSxFQUFLN0IsaUJBbkhaOEIsS0FBS1QsZUFBaUIzQixFQUFLcUMsS0FDM0JELEtBQUtFLFVBQVl0QyxFQUFLdUMsS0FDdEJILEtBQUtWLGlCQUFtQixDQUFDLENBQUNjLElBQUtKLEtBQUtFLFdBQVksQ0FBQ0csSUFBSyxRQUFGLE9BQVVMLEtBQUtULGtCQUNuRVMsS0FBS2pDLGtCQUFvQkgsRUFBSzBDLGlCQUM5Qk4sS0FBS1gsaUJBQW1CekIsRUFBSzJDLGdCQUM3QlAsS0FBSzVCLG9CQUFzQlIsRUFBSzRDLG1CQUNoQ1IsS0FBS2pCLE9BQVNuQixFQUFLNkMsTUFDbkJULEtBQUszQixJQUFNVCxFQUFLUyxJQUNoQjJCLEtBQUtsQixRQUFVbEIsRUFBSzhDLE9BQ3BCVixLQUFLckIsT0FBU2YsRUFBSzhCLE1BQ25CTSxLQUFLMUIsY0FBZ0JWLEVBQUsrQyxrQiwwS0NmVEMsRSxXQUNuQixhQUFpQ0MsR0FBbUIsSUFBdENDLEVBQXNDLEVBQXRDQSxNQUFPQyxFQUErQixFQUEvQkEsVSw0RkFBK0IsU0FDbERmLEtBQUtnQixlQUFpQkYsRUFDdEJkLEtBQUtpQixVQUFZRixFQUNqQmYsS0FBS2tCLFdBQWFyRCxTQUFTQyxjQUFjK0MsRywyQ0FHM0MsV0FDRWIsS0FBS2tCLFdBQVdDLFVBQVksSyxxQkFHOUIsU0FBUXhHLEdBQ05xRixLQUFLa0IsV0FBV0UsUUFBUXpHLEsseUJBRzFCLFdBQWMsV0FDWnFGLEtBQUtxQixTQUVMckIsS0FBS2dCLGVBQWVsRyxTQUFRLFNBQUF3RyxHQUMxQixFQUFLTCxVQUFVSyxXLHdUQ2pCQUMsRSxXQUNuQixXQUFZQyxHQUFlLFksNEZBQUEsbUNBU1QsU0FBQ0MsR0FDYkEsRUFBSXpHLE1BQVFLLEVBQU9rQixlQUNyQixFQUFLbUYsV0FYa0IsZ0NBa0JILFNBQUNELEdBQ25CQSxFQUFJRSxTQUFXRixFQUFJRyxlQUNyQixFQUFLRixXQW5CUDFCLEtBQUs2QixPQUFTaEUsU0FBU0MsY0FBYzBELEdBQ3JDeEIsS0FBSzhCLGFBQWU5QixLQUFLNkIsT0FBTy9ELGNBQWN6QyxFQUFPbUIsMEIseUNBd0J2RCxXQUVFd0QsS0FBSzZCLE9BQU81QyxpQkFBaUIsUUFBU2UsS0FBSytCLHVCQUczQ0MsT0FBTy9DLGlCQUFpQixVQUFXZSxLQUFLaUMsaUJBRXhDakMsS0FBSzZCLE9BQU9wRCxVQUFVeUQsSUFBSTdHLEVBQU9vQixvQixtQkFNbkMsV0FDRXVELEtBQUs2QixPQUFPcEQsVUFBVU4sT0FBTzlDLEVBQU9vQixrQkFDcEN1RixPQUFPRyxvQkFBb0IsVUFBV25DLEtBQUtpQyxpQkFDM0NqQyxLQUFLNkIsT0FBT00sb0JBQW9CLFFBQVNuQyxLQUFLK0IseUIsK0JBTWhELFdBQW9CLFdBQ2xCL0IsS0FBSzhCLGFBQWE3QyxpQkFBaUIsU0FBUyxrQkFBTSxFQUFLeUMsZ0Isd21DQ2hEdENVLEUsdXBCQUNuQixXQUFZWixHQUFlLGEsNEZBQUEsVUFDekIsY0FBTUEsSUFDRGEsWUFBYyxFQUFLUixPQUFPL0QsY0FBY3pDLEVBQU9xQixvQkFDcEQsRUFBSzRGLHVCQUF5QixFQUFLVCxPQUFPL0QsY0FBY3pDLEVBQU9zQiwrQkFDL0QsRUFBSzRGLG9CQUpvQixFLGlDQVkzQixTQUFLM0gsRUFBWTRILEdBQ2Y5SCxFQUFxQnNGLEtBQUtxQyxZQUFhekgsR0FDdkNvRixLQUFLc0MsdUJBQXVCN0MsWUFBYytDLEVBQzFDLDJDLG1CQU1GLFdBQ0UsMENBQ0F4QyxLQUFLc0MsdUJBQXVCN0MsWUFBYyxHQUMxQy9FLEVBQXFCc0YsS0FBS3FDLFlBQWEsQ0FBQyxDQUFDakMsSUFBSyxJQUFLLENBQUNDLElBQUssVyxvQkF6QmpCa0IsRyxxbENDRHZCa0IsRSx1cEJBQ25CLGNBQWtELE1BQXBDakIsRUFBb0MsRUFBcENBLGNBQWVrQixFQUFxQixFQUFyQkEsbUJBQXFCLE8sNEZBQUEsVUFDaEQsY0FBTWxCLElBQ0RtQixXQUFhLEVBQUtkLE9BQU8vRCxjQUFjekMsRUFBT0MsbUJBQ25ELEVBQUtzSCxXQUFhLEVBQUtELFdBQVdFLGlCQUFpQnhILEVBQU9FLHdCQUMxRCxFQUFLdUgsWUFBYyxHQUNuQixFQUFLQyxvQkFBc0JMLEVBQW1CLEtBQU0sRUFBS0ksYUFBYUUsS0FBM0MsTUFDM0IsRUFBS0MsY0FBZ0IsRUFBS3BCLE9BQU8vRCxjQUFjekMsRUFBT0csK0JBQ3RELEVBQUswSCwwQkFBNEIsRUFBS0QsY0FBY3hELFlBQ3BELEVBQUs4QyxvQkFSMkMsRSw0Q0FjbEQsV0FBa0IsV0FDaEJ2QyxLQUFLNEMsV0FBVzlILFNBQVEsU0FBQXFJLEdBQUssT0FBSSxFQUFLTCxZQUFZSyxFQUFNbEQsTUFBUWtELEVBQU1oSSxXLDRCQU94RSxTQUFlaUksR0FDYnBELEtBQUs0QyxXQUFXOUgsU0FBUSxTQUFBcUksR0FDdEJBLEVBQU1oSSxNQUFRaUksRUFBT0QsRUFBTWxELFcsK0JBTy9CLFdBQW9CLFdBQ2xCLHNEQUNBRCxLQUFLMkMsV0FBVzFELGlCQUFpQixVQUFVLFNBQUN3QyxHQUMxQyxFQUFLNEIsa0JBQ0wsRUFBS04sb0JBQW9CdEIsUSxtQkFNN0IsV0FDRSwwQ0FDQXpCLEtBQUsyQyxXQUFXVyxVLGtCQU9sQixTQUFLQyxHQUNIQSxJQUNBLDJDLHFCQU9ELFdBQ0MsT0FBT3ZELEtBQUsyQyxhLHVDQU9kLFNBQTBCYSxHQUN4QnhELEtBQUtpRCxjQUFjeEQsWUFBYytELEVBQVNuSSxFQUFPSSx3QkFBMEJ1RSxLQUFLa0QsK0Isb0JBckV6QzNCLEcsNDJCQ0h0QmtDLEVBQ25CLFdBQVlwSSxFQUFRcUksR0FBTSxZLDRGQUFBLHdDQVdILFdBQU0sTUFDM0IsRUFBS1QsY0FBYzdILGFBQWEsV0FBWSxhQUM1QyxJQUFLNkgsY0FBY3hFLFdBQVVOLE9BQTdCLFVBQXVDLEVBQUt3RixRQUFRaEksc0JBQ3BELEVBQUtzSCxjQUFjeEUsVUFBVXlELElBQUksRUFBS3lCLFFBQVFqSSx5QkFkdEIsOEJBb0JKLFdBQU0sTUFDMUIsRUFBS3VILGNBQWN4RSxVQUFVTixPQUFPLEVBQUt3RixRQUFRakksdUJBQ2pELElBQUt1SCxjQUFjeEUsV0FBVXlELElBQTdCLFVBQW9DLEVBQUt5QixRQUFRaEksc0JBQ2pELEVBQUtzSCxjQUFjVyxnQkFBZ0IsZUF2QlgscUJBK0JiLFNBQUNDLEVBQWNWLEdBQzFCVSxFQUFhcEUsWUFBYzBELEVBQU1XLGtCQUNqQ1gsRUFBTTFFLFVBQVV5RCxJQUFJLEVBQUt5QixRQUFRL0gsaUJBQ2pDaUksRUFBYXBGLFVBQVV5RCxJQUFJLEVBQUt5QixRQUFROUgsNEJBbENoQixxQkEwQ2IsU0FBQ2dJLEVBQWNWLEdBQzFCQSxFQUFNMUUsVUFBVU4sT0FBTyxFQUFLd0YsUUFBUS9ILGlCQUNwQ2lJLEVBQWFwRixVQUFVTixPQUFPLEVBQUt3RixRQUFROUgseUJBQzNDZ0ksRUFBYXBFLFlBQWMsTUE3Q0gsd0JBbURWLFdBQ2QsRUFBS3NFLFFBQVFqSixTQUFRLFNBQUNxSSxFQUFPYSxHQUMzQixFQUFLQyxXQUFXLEVBQUtDLFFBQVFGLEdBQVFiLFNBckRmLDhCQThESixTQUFDQSxFQUFPVSxHQUN2QlYsRUFBTWdCLFNBQVNDLE1BR2xCLEVBQUtILFdBQVdKLEVBQWNWLEdBRjlCLEVBQUtrQixXQUFXUixFQUFjVixNQWhFUixpQ0F3RUQsV0FDdkIsT0FBTyxFQUFLWSxRQUFRTyxPQUFNLFNBQUFuQixHQUFLLE9BQUlBLEVBQU1nQixTQUFTQyxZQXpFMUIsMEJBK0VSLFdBQ1gsRUFBS0cseUJBR1IsRUFBS0Msc0JBRkwsRUFBS0MsMEJBakZpQiw4QkF5RkosV0FDcEIsRUFBS0MsZ0JBQ0wsRUFBS0QsMEJBM0ZtQiwyQkFpR1AsV0FDakIsRUFBS1YsUUFBUWpKLFNBQVEsU0FBQXFJLEdBQ25CLElBQU1VLEVBQWUsRUFBS2MsTUFBTTdHLGNBQVgsV0FBNkJxRixFQUFNeUIsR0FBbkMsV0FDckJ6QixFQUFNbEUsaUJBQWlCLFNBQVMsU0FBQ3dDLEdBQy9CLEVBQUtvRCxvQkFBb0JwRCxFQUFJRSxPQUFRa0MsR0FDckMsRUFBS2lCLDJCQXJHVDlFLEtBQUsyRCxRQUFVdEksRUFDZjJFLEtBQUsyRSxNQUFRakIsRUFDYjFELEtBQUtpRCxjQUFnQmpELEtBQUsyRSxNQUFNN0csY0FBY2tDLEtBQUsyRCxRQUFRbkksK0JBQzNEd0UsS0FBSytELFFBQVVnQixNQUFNQyxLQUFLaEYsS0FBSzJFLE1BQU05QixpQkFBaUI3QyxLQUFLMkQsUUFBUXBJLHlCQUNuRXlFLEtBQUtrRSxRQUFVbEUsS0FBSytELFFBQVFrQixLQUFJLFNBQUE5QixHQUFLLE9BQUssRUFBS3dCLE1BQU03RyxjQUFYLFdBQTZCcUYsRUFBTXlCLEdBQW5DLGUsa1NDSnpCTSxFLFdBQ25CLFdBQVlDLEksNEZBQU0sU0FDaEJuRixLQUFLb0YsYUFBZXZILFNBQVNDLGNBQWNxSCxFQUFLMUgscUJBQ2hEdUMsS0FBS3FGLG9CQUFzQnhILFNBQVNDLGNBQWNxSCxFQUFLekgsNEJBQ3ZEc0MsS0FBS3NGLFFBQVV6SCxTQUFTQyxjQUFjcUgsRUFBS2hJLHVCQUMzQzZDLEtBQUszQixJQUFNOEcsRUFBSzlHLElBQ2hCMkIsS0FBS3VGLGNBQWNKLEVBQUtLLFEsZ0RBTzFCLFdBQWMsTUFDWixjQUFTbkssRUFBT2dDLHFCQUF1QjJDLEtBQUtvRixhQUFhM0YsYUFBekQsSUFDU3BFLEVBQU9pQyw0QkFBOEIwQyxLQUFLcUYsb0JBQW9CNUYsYUFEdkUsYUFFZ0JPLEtBQUszQixLQUZyQixJLHlCQVNGLFNBQVlULEdBQ1ZvQyxLQUFLb0YsYUFBYTNGLFlBQWM3QixFQUFLcUMsS0FDckNELEtBQUtxRixvQkFBb0I1RixZQUFjN0IsRUFBSzZILGMsMkJBTzlDLFNBQWNDLEdBQ1oxRixLQUFLc0YsUUFBUWxGLElBQU1zRixPLGdNQ25DRkMsRSxXQUNuQixXQUFZQyxJLDRGQUFTLFNBQ25CNUYsS0FBSzZGLFFBQVVELEVBQVFDLFFBQ3ZCN0YsS0FBSzhGLFFBQVVGLEVBQVFFLFEsK0NBVXpCLFNBQVdDLEVBQU1DLEdBQW1CLElBQVhDLEVBQVcsdURBQUosR0FDeEJDLEVBQWMsQ0FDbEJGLE9BQVFBLEVBQ1JGLFFBQVM5RixLQUFLOEYsU0FLaEIsTUFIZSxTQUFYRSxHQUFnQyxVQUFYQSxJQUN2QkUsRUFBVyxLQUFXQyxLQUFLQyxVQUFVSCxJQUVoQ0ksTUFBTSxHQUFELE9BQUlyRyxLQUFLNkYsU0FBVCxPQUFtQkUsR0FBUUcsR0FDdENJLE1BQUssU0FBQUMsR0FDSixPQUFJQSxFQUFJQyxHQUNDRCxFQUFJRSxPQUNOQyxRQUFRQyxPQUFSLGlCQUF5QkosRUFBSUssYyx5QkFReEMsV0FDRSxPQUFPNUcsS0FBSzZHLFdBQVcsV0FBWSxTLHlCQVFyQyxZQUE2QixJQUFmNUcsRUFBZSxFQUFmQSxLQUFNNkcsRUFBUyxFQUFUQSxNQUNsQixPQUFPOUcsS0FBSzZHLFdBQVcsV0FBWSxRQUFTLENBQUM1RyxLQUFNQSxFQUFNNkcsTUFBT0EsTSwyQkFRbEUsU0FBY3BCLEdBQ1osT0FBTzFGLEtBQUs2RyxXQUFXLGtCQUFtQixRQUFTLENBQUNyQixPQUFRRSxNLDZCQU85RCxXQUNFLE9BQU8xRixLQUFLNkcsV0FBVyxRQUFTLFMscUJBUWxDLFlBQXdCLElBQWQ1RyxFQUFjLEVBQWRBLEtBQU1FLEVBQVEsRUFBUkEsS0FDZCxPQUFPSCxLQUFLNkcsV0FBVyxRQUFTLE9BQVEsQ0FBQzVHLEtBQU1BLEVBQU1FLEtBQU1BLE0sd0JBUTdELFNBQVc0RyxHQUNULE9BQU8vRyxLQUFLNkcsV0FBTCxnQkFBeUJFLEdBQVUsWSxzQkFRNUMsU0FBU0EsR0FDUCxPQUFPL0csS0FBSzZHLFdBQUwsc0JBQStCRSxHQUFVLFMsd0JBUWxELFNBQVdBLEdBQ1QsT0FBTy9HLEtBQUs2RyxXQUFMLHNCQUErQkUsR0FBVSxlLHdtQ0M3Ri9CQyxFLHVwQkFDbkIsV0FBWXhGLEdBQWUsYSw0RkFBQSxVQUN6QixjQUFNQSxJQUNEbUIsV0FBYSxFQUFLZCxPQUFPL0QsY0FBY3pDLEVBQU9DLG1CQUNuRCxFQUFLMkwsZUFBaUIsS0FDdEIsRUFBSzFFLG9CQUpvQixFLDZDQVczQixTQUFpQjJFLEdBQ2ZsSCxLQUFLaUgsZUFBaUJDLEksbUJBTXhCLFdBQ0UsMENBQ0FsSCxLQUFLaUgsZUFBaUIsTywrQkFNeEIsV0FBb0IsV0FDbEIsc0RBQ0FqSCxLQUFLMkMsV0FBVzFELGlCQUFpQixVQUFVLFNBQUN3QyxHQUFELE9BQVMsRUFBS3dGLGVBQWV4RixXLG9CQTdCbENGLEcsMEdDNEUxQyxTQUFTNEYsRUFBYUMsRUFBVUMsRUFBb0JDLEVBQUtDLEVBQVVDLEdBakVuRSxJQUEwQkMsRUFrRXhCTCxFQUFTOUcsaUJBQW1CakYsRUFBT1UscUJBQ25DcUwsRUFBUzdHLGlCQW5FZWtILEVBbUVtQkMsRUFsRXBDLFNBQVVDLEVBQWlCQyxHQUN6QixPQUFPLFdBQU9ILEVBQU1JLEtBQUtGLEVBQWlCQyxNQWtFbkRSLEVBQVM1RyxtQkF4RFgsU0FBZ0M4RyxFQUFLRSxHQW9CbkMsT0FiMkIsU0FBQ00sRUFBTWYsR0FDaENTLEVBQW1CTyxrQkFBaUIsU0FBQ3RHLEdBQ25DQSxFQUFJdUcsaUJBQ0pWLEVBQUlXLFdBQVdsQixHQUNkVCxNQUFLLFNBQUFDLEdBQ0p1QixFQUFLSSxTQUNMVixFQUFtQjlGLFdBRXBCeUcsT0FBTSxTQUFBQyxHQUFHLE9BQUlDLFFBQVFDLElBQUlGLE1BQ3pCRyxRQUFRZixFQUFtQk8saUJBQWlCLFVBRS9DUCxFQUFtQkssUUFzQ1NXLENBQXVCbEIsRUFBS0UsR0FDMURKLEVBQVN6RyxpQkE3QlgsU0FBOEIyRyxHQWlCNUIsT0FUeUIsU0FBQ1EsRUFBTWYsRUFBUTBCLElBQ2hCQSxFQUFRbkIsRUFBSW9CLFdBQVczQixHQUFVTyxFQUFJcUIsU0FBUzVCLElBRW5FVCxNQUFLLFNBQUFDLEdBQ0p1QixFQUFLaEksbUJBQ0xnSSxFQUFLYyxTQUFTckMsRUFBSTdHLFVBRW5CeUksT0FBTSxTQUFBQyxHQUFHLE9BQUlDLFFBQVFDLElBQUlGLE9BY0FTLENBQXFCdkIsR0FDakRGLEVBQVMxRyxPQUFTNkcsRUFBU3VCLGNBQWNwSSxPQUN6QyxJQUFNcUksRUFBWSxJQUFJcEwsRUFBS3lKLEdBQzNCQyxFQUFtQjJCLFFBQVFELEVBQVVFLGdCQUd2QyxJQUFNdkIsRUFBYSxJQUFJdEYsRUFBZS9HLEVBQU91Qiw0QkFPN0MsU0FBU3NNLEVBQXNCaEMsR0FjN0IsT0FOZ0IsU0FBNEJPLEVBQU8wQixHQUNqRCxPQUFPLFNBQVUxSCxHQUNmQSxFQUFJdUcsaUJBQ0pkLEVBQVNPLEVBQU8wQixLQVl0QixTQUFTQyxFQUF1QkMsRUFBYUMsR0FpQjNDLE9BVjJCLFNBQUM3QixFQUFPMEIsR0FDakMxQixFQUFNOEIsMkJBQTBCLEdBQ2hDRixFQUFZRixHQUNYN0MsTUFBSyxTQUFBa0QsR0FDSkYsRUFBYUgsRUFBVUssR0FDdkIvQixFQUFNL0YsV0FFUHlHLE9BQU0sU0FBQUMsR0FBRyxPQUFJQyxRQUFRQyxJQUFJRixNQUN6QkcsU0FBUSxXQUFPZCxFQUFNOEIsMkJBQTBCLE9BVXBELFNBQVNFLEVBQXFCL0YsR0FDNUIsSUFBTWdHLEVBQVksSUFBSWpHLEVBQWNwSSxFQUFRcUksR0FFNUMsT0FEQWdHLEVBQVVDLG1CQUNIRCxFQUlULElBQU1wQyxFQUFNLElBQUkzQixFQUFJLENBQ2xCRSxRQUFTLCtDQUNUQyxRQUFTLENBQ1A4RCxjQUFlLHVDQUNmLGVBQWdCLHNCQUlwQmxELFFBQVFtRCxJQUFJLENBQUN2QyxFQUFJd0IsY0FBZXhCLEVBQUl3QyxvQkFDakN4RCxNQUFLLFlBQW1CLEksSUFBQSxHLEVBQUEsRSw0Q0FBQSxJLGd4QkFBakJuQixFQUFpQixLQUFYNEUsRUFBVyxLQUd2QjVFLEVBQUsxSCxvQkFBc0JwQyxFQUFPb0Msb0JBQ2xDMEgsRUFBS3pILDJCQUE2QnJDLEVBQU9xQywyQkFDekN5SCxFQUFLaEksc0JBQXdCOUIsRUFBTzhCLHNCQUNwQyxJQUFNNk0sRUFBYyxJQUFJOUUsRUFBU0MsR0FFakM2RSxFQUFZQyxZQUFZLENBQUVoSyxLQUFNa0YsRUFBS2xGLEtBQU13RixZQUFhTixFQUFLMkIsUUFFN0QsSUFBTW9ELEVBQTJCaEIsRUFDN0JFLEdBQ0UsU0FBQ0QsR0FBRCxPQUFjN0IsRUFBSTJDLFlBQVksQ0FBRWhLLEtBQU1rSixFQUFTOU4sRUFBT2dDLHNCQUF1QnlKLE1BQU9xQyxFQUFTOU4sRUFBT2lDLGtDQUNwRyxTQUFDNkwsRUFBVUssR0FBWVEsRUFBWUMsWUFBWSxDQUFFaEssS0FBTWtKLEVBQVM5TixFQUFPZ0Msc0JBQXVCb0ksWUFBYTBELEVBQVM5TixFQUFPaUMsbUNBSTNINk0sRUFBbUIsSUFBSTFILEVBQWMsQ0FDekNqQixjQUFlbkcsRUFBT3dCLGlDQUN0QjZGLG1CQUFvQndILElBRWhCRSxFQUE0QlgsRUFBcUJVLEVBQWlCRSxXQUM5Q3hNLFNBQVNDLGNBQWMseUJBQy9CbUIsaUJBQWlCLFNBQ2pDLGtCQUFNa0wsRUFBaUJ0QyxNQUNyQixXQUNFdUMsRUFBMEJFLHNCQUMxQkgsRUFBaUJJLGVBQWVQLEVBQVlsQixxQkFNbEQsSUFBTTBCLEVBQTBCdEIsRUFDOUJFLEdBQ0UsU0FBQ0QsR0FBRCxPQUFjN0IsRUFBSS9CLGNBQWM0RCxFQUFTOU4sRUFBTzRCLHlCQUNoRCxTQUFDa00sRUFBVUssR0FBWVEsRUFBWXpFLGNBQWM0RCxFQUFTOU4sRUFBTzRCLDBCQUkvRHdOLEVBQWtCLElBQUloSSxFQUFjLENBQ3hDakIsY0FBZW5HLEVBQU95QixnQ0FDdEI0RixtQkFBb0I4SCxJQUdoQkUsRUFBMkJqQixFQUFxQmdCLEVBQWdCSixXQUM3Q3hNLFNBQVNDLGNBQWN6QyxFQUFPNkIsaUNBQ3RDK0IsaUJBQWlCLFNBQ2hDLGtCQUFNd0wsRUFBZ0I1QyxNQUFNLGtCQUFNNkMsRUFBeUJKLDRCQUk3RCxJQUFNSyxFQUF5QixJQUFJM0QsRUFBYTNMLEVBQU8yQix3Q0FHakRsQixFQUFhLElBQUk4RSxFQUFRLENBQzdCRSxNQUFPaUosRUFBTWEsVUFDYjdKLFNBQVUsU0FBQ08sR0FBRCxPQUFVNkYsRUFBYTdGLEVBQU14RixFQUFZd0wsRUFBSzBDLEVBQWFXLEtBRnBELFdBR1p0UCxFQUFPUyxhQUVkQSxFQUFXK08sY0FHWCxJQUFNQyxFQUEwQjVCLEVBQzlCRSxHQUNFLFNBQUNELEdBQUQsT0FBYzdCLEVBQUl5RCxRQUFRLENBQUU5SyxLQUFNa0osRUFBUzlOLEVBQU9rQyxvQkFDdEI0QyxLQUFNZ0osRUFBUzlOLEVBQU9tQyx3QkFDbEQsU0FBQzJMLEVBQVVLLEdBQVlyQyxFQUFhcUMsRUFBUTFOLEVBQVl3TCxFQUFLMEMsRUFBYVcsT0FJeEVLLEVBQWtCLElBQUl2SSxFQUFjLENBQ3hDakIsY0FBZW5HLEVBQU8wQixnQ0FDdEIyRixtQkFBb0JvSSxJQUVoQkcsRUFBMkJ4QixFQUFxQnVCLEVBQWdCWCxXQUU3Q3hNLFNBQVNDLGNBQWN6QyxFQUFPK0IsMEJBQ3RDNkIsaUJBQWlCLFNBQ2pDLGtCQUFNK0wsRUFBZ0JuRCxNQUNwQixrQkFBTW9ELEVBQXlCWCwrQkFLbkNuQyxPQUFNLFNBQUFDLEdBQUcsT0FBSUMsUUFBUUMsSUFBSUYsTyIsImZpbGUiOiJtYWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBBcHBsaWVzIGF0dHJpYnV0ZXMgdG8gYW4gZWxlbWVudCBmcm9tIGFuIGFycmF5IG9mIGF0dHJpYnV0ZSBvYmplY3RzXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBlbGVtZW50XG4gKiBAcGFyYW0ge0FycmF5fSBhdHRyaWJ1dGVzIC0gW3thdHRyMTogJ3ZhbHVlMX0sIHthdHRyMjogJ3ZhbHVlMid9XVxuICovXG5mdW5jdGlvbiBzZXRFbGVtZW50QXR0cmlidXRlcyhlbGVtZW50LCBhdHRyaWJ1dGVzKSB7XG4gIGlmIChhdHRyaWJ1dGVzLmxlbmd0aCA+IDApIHtcbiAgICBhdHRyaWJ1dGVzLmZvckVhY2goYXR0ciA9PiB7XG4gICAgICBjb25zdCBrZXkgPSBPYmplY3Qua2V5cyhhdHRyKVswXTtcbiAgICAgIGNvbnN0IHZhbHVlID0gYXR0cltrZXldO1xuICAgICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoa2V5LCB2YWx1ZSk7XG4gICAgfSk7XG4gIH1cbn1cblxuZXhwb3J0IHtzZXRFbGVtZW50QXR0cmlidXRlc31cbiIsImNvbnN0IGNvbmZpZyA9IHtcbiAgcG9wdXBGb3JtU2VsZWN0b3I6ICcucG9wdXBfX2Zvcm0nLFxuICBwb3B1cEZvcm1JbnB1dFNlbGVjdG9yOiAnLnBvcHVwX19mb3JtLXRleHQnLFxuICBwb3B1cEZvcm1TdWJtaXRCdXR0b25TZWxlY3RvcjogJy5wb3B1cF9fZm9ybS1zdWJtaXQtYnRuJyxcbiAgcG9wdXBXaXRoRm9ybVNhdmluZ1RleHQ6ICdTYXZpbmcuLi4nLFxuICBzdWJtaXRCdXR0b25EaXNhYmxlZDogJ3BvcHVwX19mb3JtLXN1Ym1pdC1idG5fZGlzYWJsZWQnLFxuICB0cmFuc3BhcmVudE11Y2hNb3JlOiBbJ3RyYW5zcGFyZW50JywgJ3RyYW5zcGFyZW50X2Ftb3VudF9tdWNoLW1vcmUnXSxcbiAgaW5wdXRGaWVsZEVycm9yOiAncG9wdXBfX2Zvcm0tdGV4dF90eXBlX2Vycm9yJyxcbiAgaW5wdXRFcnJvck1lc3NhZ2VBY3RpdmU6ICdwb3B1cF9fZm9ybS10ZXh0LWVycm9yX2FjdGl2ZScsXG4gIHBsYWNlc0xpc3Q6ICdwbGFjZXNfX2xpc3QnLFxuICBjYXJkVGVtcGxhdGVTZWxlY3RvcjogJyNwbGFjZUNhcmRUZW1wbGF0ZScsXG4gIHBsYWNlQ2FyZFNlbGVjdG9yOiAnLnBsYWNlJyxcbiAgcGxhY2VQaG90b1NlbGVjdG9yOiAnLnBsYWNlX19waG90bycsXG4gIHBsYWNlTmFtZVNlbGVjdG9yOiAnLnBsYWNlX19uYW1lJyxcbiAgcGxhY2VEZWxldGVCdG5TZWxlY3RvcjogJy5wbGFjZV9fcmVtb3ZlLWJ0bicsXG4gIHBsYWNlTGlrZUJ0blNlbGVjdG9yOiAnLnBsYWNlX19saWtlLWJ0bicsXG4gIHBsYWNlTnVtYmVyT2ZMaWtlc1NlbGVjdG9yOiAnLnBsYWNlX19udW1iZXItb2YtbGlrZXMnLFxuICBwbGFjZUxpa2VCdG5TZWxlY3RlZENsYXNzOiAncGxhY2VfX2xpa2UtYnRuX3NlbGVjdGVkJyxcbiAgZXNjYXBlS2V5Q29kZTogJ0VzY2FwZScsXG4gIHBvcHVwQ2xvc2VCdXR0b25TZWxlY3RvcjogJy5wb3B1cF9fY29udGFpbmVyLWNsb3NlLWJ0bicsXG4gIHBvcHVwT3BlbmVkQ2xhc3M6ICdwb3B1cF9vcGVuZWQnLFxuICBwb3B1cFBob3RvU2VsZWN0b3I6ICcucG9wdXBfX3Bob3RvJyxcbiAgcG9wdXBQaG90b0Rlc2NyaXB0aW9uU2VsZWN0b3I6ICcucG9wdXBfX3Bob3RvLWRlc2NyaXB0aW9uJyxcbiAgcGhvdG9Qb3B1cFRlbXBsYXRlU2VsZWN0b3I6ICcjc2hvd1Bob3RvJyxcbiAgcHJvZmlsZUVkaXRQb3B1cFRlbXBsYXRlU2VsZWN0b3I6ICcjZWRpdFByb2ZpbGUnLFxuICBhdmF0YXJFZGl0UG9wdXBUZW1wbGF0ZVNlbGVjdG9yOiAnI2VkaXRBdmF0YXInLFxuICBwcm9maWxlQWRkUG9wdXBUZW1wbGF0ZVNlbGVjdG9yOiAnI2FkZFBsYWNlJyxcbiAgY2FyZERlbGV0ZUNvbmZpcm1Qb3B1cFRlbXBsYXRlU2VsZWN0b3I6ICcjY29uZmlybURlbGV0ZScsXG4gIGF2YXRhckVkaXRJbnB1dE5hbWU6ICdhdmF0YXJVcmwnLFxuICBwcm9maWxlQXZhdGFyRWRpdEJ1dHRvblNlbGVjdG9yOiAnLnByb2ZpbGVfX2F2YXRhci1lZGl0LWJ1dHRvbicsXG4gIHByb2ZpbGVBdmF0YXJTZWxlY3RvcjogJy5wcm9maWxlX19waWMnLFxuICBwcm9maWxlQWRkQnV0dG9uU2VsZWN0b3I6ICcucHJvZmlsZV9fYWRkLWJ1dHRvbicsXG4gIHByb2ZpbGVJbnB1dE5hbWVOYW1lOiAncHJvZmlsZU5hbWUnLFxuICBwcm9maWxlSW5wdXREZXNjcmlwdGlvbk5hbWU6ICdwcm9maWxlRGVzY3JpcHRpb24nLFxuICBwbGFjZUlucHV0TmFtZU5hbWU6ICdwbGFjZU5hbWUnLFxuICBwbGFjZUlucHV0VXJsTmFtZTogJ3BsYWNlVXJsJyxcbiAgcHJvZmlsZU5hbWVTZWxlY3RvcjogJy5wcm9maWxlX19uYW1lJyxcbiAgcHJvZmlsZURlc2NyaXB0aW9uU2VsZWN0b3I6ICcucHJvZmlsZV9fZGVzY3JpcHRpb24nLFxufTtcblxuZXhwb3J0IHtjb25maWd9XG4iLCJpbXBvcnQge3NldEVsZW1lbnRBdHRyaWJ1dGVzfSBmcm9tICcuLi91dGlscy91dGlscy5qcyc7XG5pbXBvcnQge2NvbmZpZ30gZnJvbSAnLi4vdXRpbHMvY29uc3RhbnRzLmpzJztcblxuZXhwb3J0IGNsYXNzIENhcmQge1xuICBjb25zdHJ1Y3RvcihkYXRhKSB7XG4gICAgdGhpcy5fcGxhY2VOYW1lVGV4dCA9IGRhdGEubmFtZTtcbiAgICB0aGlzLl9pbWFnZVVybCA9IGRhdGEubGluaztcbiAgICB0aGlzLl9waG90b0F0dHJpYnV0ZXMgPSBbe3NyYzogdGhpcy5faW1hZ2VVcmx9LCB7YWx0OiBg0YTQvtGC0L4gJHt0aGlzLl9wbGFjZU5hbWVUZXh0fWB9XTtcbiAgICB0aGlzLl90ZW1wbGF0ZVNlbGVjdG9yID0gZGF0YS50ZW1wbGF0ZVNlbGVjdG9yO1xuICAgIHRoaXMuX2hhbmRsZUNhcmRDbGljayA9IGRhdGEuaGFuZGxlQ2FyZENsaWNrO1xuICAgIHRoaXMuX2NhcmREZWxldGVDYWxsYmFjayA9IGRhdGEuY2FyZERlbGV0ZUNhbGxiYWNrO1xuICAgIHRoaXMuX293bmVyID0gZGF0YS5vd25lcjtcbiAgICB0aGlzLl9pZCA9IGRhdGEuX2lkO1xuICAgIHRoaXMuX3VzZXJJZCA9IGRhdGEudXNlcklkO1xuICAgIHRoaXMuX2xpa2VzID0gZGF0YS5saWtlcztcbiAgICB0aGlzLl9saWtlQ2FsbGJhY2sgPSBkYXRhLmNhcmRMaWtlQ2FsbGJhY2s7XG4gIH1cblxuICAvKipcbiAgKiBDcmVhdGVzIGFuIGVtcHR5IHBsYWNlIGNhcmQgZnJvbSBwbGFjZSBjYXJkIHRlbXBsYXRlXG4gICogQHJldHVybnMge0hUTUxFbGVtZW50fVxuICAqL1xuICBfZ2V0Q2FyZEZyb21UZW1wbGF0ZSA9ICgpID0+IHtcbiAgICBjb25zdCBjYXJkRWxlbWVudCA9IGRvY3VtZW50XG4gICAgICAucXVlcnlTZWxlY3Rvcih0aGlzLl90ZW1wbGF0ZVNlbGVjdG9yKVxuICAgICAgLmNvbnRlbnRcbiAgICAgIC5xdWVyeVNlbGVjdG9yKGNvbmZpZy5wbGFjZUNhcmRTZWxlY3RvcilcbiAgICAgIC5jbG9uZU5vZGUodHJ1ZSk7XG4gICAgcmV0dXJuIGNhcmRFbGVtZW50O1xuICB9O1xuXG4gIC8qKlxuICAgKiBEZWxldGVzIHRoZSBjYXJkIGZyb20gdGhlIHBhZ2VcbiAgICovXG4gIGRlbGV0ZSA9ICgpID0+IHtcbiAgICB0aGlzLl9uZXdQbGFjZUNhcmQucmVtb3ZlKCk7XG4gICAgdGhpcy5fbmV3UGxhY2VDYXJkID0gbnVsbDtcbiAgfTtcblxuICAvKipcbiAgICogRXZlbnQgbGlzdGVuZXIgaGFuZGxlciBmb3IgZGVsZXRlIGJ1dHRvblxuICAgKi9cbiAgX2hhbmRsZURlbGV0ZUNsaWNrID0gKCkgPT4ge1xuICAgIHRoaXMuX2NhcmREZWxldGVDYWxsYmFjayh0aGlzLCB0aGlzLl9pZCk7XG4gIH07XG5cbiAgLyoqXG4gICAqIEV2ZW50IGxpc3RlbmVyIGhhbmRsZXIgZm9yIGxpa2UgYnV0dG9uXG4gICAqL1xuICBfaGFuZGxlTGlrZUNsaWNrID0gKCkgPT4ge1xuICAgIHRoaXMuX2xpa2VDYWxsYmFjayh0aGlzLCB0aGlzLl9pZCwgdGhpcy5faXNMaWtlZCgpKTtcbiAgfTtcblxuICAvKipcbiAgICogU3dpdGNoZXMgbGlrZSBidXR0b24gYmV0d2VlbiBvbiBhbmQgb2ZmIHZpc3VhbCBzdGF0ZVxuICAgKi9cbiAgdG9nZ2xlTGlrZUJ1dHRvbiA9ICgpID0+IHtcbiAgICB0aGlzLl9saWtlQnV0dG9uLmNsYXNzTGlzdC50b2dnbGUoY29uZmlnLnBsYWNlTGlrZUJ0blNlbGVjdGVkQ2xhc3MpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBDaGVja3MgaWYgdGhlIGNhcmQgaXMgbGlrZWRcbiAgICogQHJldHVybnMge0Jvb2xlYW59XG4gICAqL1xuICBfaXNMaWtlZCA9ICgpID0+IHRoaXMuX2xpa2VzLmZpbmQoKGxpa2VPYmopID0+IGxpa2VPYmouX2lkID09PSB0aGlzLl91c2VySWQpO1xuXG4gIC8qKlxuICAgKiBTZXRzIGV2ZW50IGxpc3RlbmVycyBmb3IgY2FyZCBidXR0b25zXG4gICAqL1xuICBfc2V0RXZlbnRMaXN0ZW5lcnMgPSAoKSA9PiB7XG4gICAgaWYgKHRoaXMuX3VzZXJJZCA9PT0gdGhpcy5fb3duZXIuX2lkKVxuICAgICAgdGhpcy5fZGVsZXRlQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5faGFuZGxlRGVsZXRlQ2xpY2spO1xuICAgIHRoaXMuX2xpa2VCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLl9oYW5kbGVMaWtlQ2xpY2spO1xuICAgIHRoaXMuX3BsYWNlUGhvdG8uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLl9oYW5kbGVDYXJkQ2xpY2sodGhpcy5fcGhvdG9BdHRyaWJ1dGVzLCB0aGlzLl9wbGFjZU5hbWVUZXh0KSk7XG4gIH07XG5cbiAgLyoqXG4gICAqIFNldHMgY2FyZCdzIG51bWJlciBvZiBsaWtlc1xuICAgKi9cbiAgX3NldE51bWJlck9mTGlrZXMgPSAoKSA9PiB7XG4gICAgdGhpcy5fbnVtYmVyT2ZMaWtlcy50ZXh0Q29udGVudCA9IHRoaXMuX2xpa2VzLmxlbmd0aDtcbiAgfTtcblxuICAvKipcbiAgICogVXBkYXRlcyBjYXJkJ3MgbGlrZXNcbiAgICogQHBhcmFtIHtBcnJheX0gbGlrZXNcbiAgICovXG4gIHNldExpa2VzID0gKGxpa2VzKSA9PiB7XG4gICAgdGhpcy5fbGlrZXMgPSBsaWtlcztcbiAgICB0aGlzLl9zZXROdW1iZXJPZkxpa2VzKCk7XG4gIH07XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBjb21wbGV0ZSBwbGFjZSBjYXJkXG4gICAqIEByZXR1cm5zIHtIVE1MRWxlbWVudH1cbiAgICovXG4gIGdlbmVyYXRlQ2FyZCA9ICgpID0+IHtcbiAgICB0aGlzLl9uZXdQbGFjZUNhcmQgPSB0aGlzLl9nZXRDYXJkRnJvbVRlbXBsYXRlKCk7XG5cbiAgICB0aGlzLl9wbGFjZVBob3RvID0gdGhpcy5fbmV3UGxhY2VDYXJkLnF1ZXJ5U2VsZWN0b3IoY29uZmlnLnBsYWNlUGhvdG9TZWxlY3Rvcik7XG4gICAgc2V0RWxlbWVudEF0dHJpYnV0ZXModGhpcy5fcGxhY2VQaG90bywgdGhpcy5fcGhvdG9BdHRyaWJ1dGVzKTtcblxuICAgIHRoaXMuX3BsYWNlTmFtZSA9IHRoaXMuX25ld1BsYWNlQ2FyZC5xdWVyeVNlbGVjdG9yKGNvbmZpZy5wbGFjZU5hbWVTZWxlY3Rvcik7XG4gICAgdGhpcy5fcGxhY2VOYW1lLnRleHRDb250ZW50ID0gYCR7dGhpcy5fcGxhY2VOYW1lVGV4dH1gO1xuXG5cbiAgICB0aGlzLl9kZWxldGVCdXR0b24gPSB0aGlzLl9uZXdQbGFjZUNhcmQucXVlcnlTZWxlY3Rvcihjb25maWcucGxhY2VEZWxldGVCdG5TZWxlY3Rvcik7XG4gICAgaWYgKHRoaXMuX3VzZXJJZCAhPSB0aGlzLl9vd25lci5faWQpIHtcbiAgICAgIHRoaXMuX2RlbGV0ZUJ1dHRvbi5yZW1vdmUoKTtcbiAgICAgIHRoaXMuX2RlbGV0ZUJ1dHRvbiA9IG51bGw7XG4gICAgfVxuXG4gICAgdGhpcy5fbGlrZUJ1dHRvbiA9IHRoaXMuX25ld1BsYWNlQ2FyZC5xdWVyeVNlbGVjdG9yKGNvbmZpZy5wbGFjZUxpa2VCdG5TZWxlY3Rvcik7XG4gICAgdGhpcy5fbnVtYmVyT2ZMaWtlcyA9IHRoaXMuX25ld1BsYWNlQ2FyZC5xdWVyeVNlbGVjdG9yKGNvbmZpZy5wbGFjZU51bWJlck9mTGlrZXNTZWxlY3Rvcik7XG4gICAgdGhpcy5fc2V0TnVtYmVyT2ZMaWtlcygpO1xuICAgIGlmICh0aGlzLl9pc0xpa2VkKCkpXG4gICAgICB0aGlzLnRvZ2dsZUxpa2VCdXR0b24oKTtcblxuICAgIHRoaXMuX3NldEV2ZW50TGlzdGVuZXJzKCk7XG5cbiAgICByZXR1cm4gdGhpcy5fbmV3UGxhY2VDYXJkO1xuICB9XG59XG4iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBTZWN0aW9uIHtcbiAgY29uc3RydWN0b3IoeyBpdGVtcywgcmVuZGVyZXIgfSwgY29udGFpbmVyU2VsZWN0b3IpIHtcbiAgICB0aGlzLl9yZW5kZXJlZEl0ZW1zID0gaXRlbXM7XG4gICAgdGhpcy5fcmVuZGVyZXIgPSByZW5kZXJlcjtcbiAgICB0aGlzLl9jb250YWluZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGNvbnRhaW5lclNlbGVjdG9yKTtcbiAgfVxuXG4gIF9jbGVhcigpIHtcbiAgICB0aGlzLl9jb250YWluZXIuaW5uZXJIVE1MID0gJyc7XG4gIH1cblxuICBhZGRJdGVtKGVsZW1lbnQpIHtcbiAgICB0aGlzLl9jb250YWluZXIucHJlcGVuZChlbGVtZW50KTtcbiAgfVxuXG4gIHJlbmRlckl0ZW1zKCkge1xuICAgIHRoaXMuX2NsZWFyKCk7XG5cbiAgICB0aGlzLl9yZW5kZXJlZEl0ZW1zLmZvckVhY2goaXRlbSA9PiB7XG4gICAgICB0aGlzLl9yZW5kZXJlcihpdGVtKTtcbiAgICB9KTtcbiAgfVxufVxuIiwiaW1wb3J0IHtjb25maWd9IGZyb20gJy4uL3V0aWxzL2NvbnN0YW50cy5qcyc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBvcHVwIHtcbiAgY29uc3RydWN0b3IocG9wdXBTZWxlY3Rvcikge1xuICAgIHRoaXMuX3BvcHVwID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcihwb3B1cFNlbGVjdG9yKTtcbiAgICB0aGlzLl9jbG9zZUJ1dHRvbiA9IHRoaXMuX3BvcHVwLnF1ZXJ5U2VsZWN0b3IoY29uZmlnLnBvcHVwQ2xvc2VCdXR0b25TZWxlY3Rvcik7XG4gIH1cblxuICAvKipcbiAgICogRXNjYXBlIGJ1dHRvbiBwcmVzcyBoYW5kbGVyXG4gICAqIEBwYXJhbSB7RXZlbnR9IGV2dFxuICAgKi9cbiAgX2hhbmRsZUVzY0Nsb3NlID0gKGV2dCkgPT4ge1xuICAgIGlmIChldnQua2V5ID09PSBjb25maWcuZXNjYXBlS2V5Q29kZSlcbiAgICAgIHRoaXMuY2xvc2UoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTaWRlIGJ1dHRvbiBjbGljayBoYW5kbGVyXG4gICAqIEBwYXJhbSB7RXZlbnR9IGV2dFxuICAgKi9cbiAgX2hhbmRsZVNpZGVDbGlja0Nsb3NlID0gKGV2dCkgPT4ge1xuICAgIGlmIChldnQudGFyZ2V0ID09PSBldnQuY3VycmVudFRhcmdldClcbiAgICAgIHRoaXMuY2xvc2UoKTtcbiAgfVxuXG4gIC8qKlxuICAgKk9wZW5zIHRoZSBQb3B1cFxuICAgKi9cbiAgb3BlbigpIHtcbiAgICAvL2Nsb3NlcyBwb3B1cCB3aXRoIGEgY2xpY2sgb3V0c2lkZSBmb3JtL3Bob3RvXG4gICAgdGhpcy5fcG9wdXAuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLl9oYW5kbGVTaWRlQ2xpY2tDbG9zZSk7XG5cbiAgICAvL2Nsb3NlcyBwb3B1cCB3aXRoIEVzY2FwZSBidXR0b24gcHJlc3NcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIHRoaXMuX2hhbmRsZUVzY0Nsb3NlKTtcblxuICAgIHRoaXMuX3BvcHVwLmNsYXNzTGlzdC5hZGQoY29uZmlnLnBvcHVwT3BlbmVkQ2xhc3MpO1xuICB9XG5cbiAgLyoqXG4gICAqIENsb3NlcyB0aGUgUG9wdXBcbiAgICovXG4gIGNsb3NlKCkge1xuICAgIHRoaXMuX3BvcHVwLmNsYXNzTGlzdC5yZW1vdmUoY29uZmlnLnBvcHVwT3BlbmVkQ2xhc3MpO1xuICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdrZXlkb3duJywgdGhpcy5faGFuZGxlRXNjQ2xvc2UpO1xuICAgIHRoaXMuX3BvcHVwLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5faGFuZGxlU2lkZUNsaWNrQ2xvc2UpO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldHMgZXZlbnQgbGlzdGVuZXIgZm9yIFBvcHVwIGNsb3NlIGJ1dHRvblxuICAgKi9cbiAgc2V0RXZlbnRMaXN0ZW5lcnMoKSB7XG4gICAgdGhpcy5fY2xvc2VCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB0aGlzLmNsb3NlKCkpO1xuICB9XG59XG4iLCJpbXBvcnQgeyBzZXRFbGVtZW50QXR0cmlidXRlcyB9IGZyb20gJy4uL3V0aWxzL3V0aWxzLmpzJztcbmltcG9ydCB7IGNvbmZpZyB9IGZyb20gJy4uL3V0aWxzL2NvbnN0YW50cy5qcyc7XG5pbXBvcnQgUG9wdXAgZnJvbSAnLi9Qb3B1cC5qcyc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBvcHVwV2l0aEltYWdlIGV4dGVuZHMgUG9wdXAge1xuICBjb25zdHJ1Y3Rvcihwb3B1cFNlbGVjdG9yKSB7XG4gICAgc3VwZXIocG9wdXBTZWxlY3Rvcik7XG4gICAgdGhpcy5fcG9wdXBQaG90byA9IHRoaXMuX3BvcHVwLnF1ZXJ5U2VsZWN0b3IoY29uZmlnLnBvcHVwUGhvdG9TZWxlY3Rvcik7XG4gICAgdGhpcy5fcG9wdXBQaG90b0Rlc2NyaXB0aW9uID0gdGhpcy5fcG9wdXAucXVlcnlTZWxlY3Rvcihjb25maWcucG9wdXBQaG90b0Rlc2NyaXB0aW9uU2VsZWN0b3IpO1xuICAgIHRoaXMuc2V0RXZlbnRMaXN0ZW5lcnMoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBPcGVucyBQb3B1cFdpdGhJbWFnZVxuICAgKiBAcGFyYW0ge0FycmF5fSBhdHRyaWJ1dGVzIC0gW3tzcmM6ICdsaW5rVG9JbWFnZSd9LCB7YWx0OiAndGV4dCBkZXNjcmlwdGlvbid9XVxuICAgKiBAcGFyYW0ge1N0cmluZ30gcGhvdG9EZXNjcmlwdGlvblxuICAgKi9cbiAgb3BlbihhdHRyaWJ1dGVzLCBwaG90b0Rlc2NyaXB0aW9uKSB7XG4gICAgc2V0RWxlbWVudEF0dHJpYnV0ZXModGhpcy5fcG9wdXBQaG90bywgYXR0cmlidXRlcyk7XG4gICAgdGhpcy5fcG9wdXBQaG90b0Rlc2NyaXB0aW9uLnRleHRDb250ZW50ID0gcGhvdG9EZXNjcmlwdGlvbjtcbiAgICBzdXBlci5vcGVuKCk7XG4gIH1cblxuICAvKipcbiAgICogQ2xvc2VzIFBvcHVwV2l0aEltYWdlXG4gICAqL1xuICBjbG9zZSgpIHtcbiAgICBzdXBlci5jbG9zZSgpO1xuICAgIHRoaXMuX3BvcHVwUGhvdG9EZXNjcmlwdGlvbi50ZXh0Q29udGVudCA9ICcnO1xuICAgIHNldEVsZW1lbnRBdHRyaWJ1dGVzKHRoaXMuX3BvcHVwUGhvdG8sIFt7c3JjOiAnJ30sIHthbHQ6ICcnfV0pO1xuICB9XG59XG4iLCJpbXBvcnQgUG9wdXAgZnJvbSAnLi9Qb3B1cC5qcyc7XG5pbXBvcnQge2NvbmZpZ30gZnJvbSAnLi4vdXRpbHMvY29uc3RhbnRzLmpzJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUG9wdXBXaXRoRm9ybSBleHRlbmRzIFBvcHVwIHtcbiAgY29uc3RydWN0b3IoeyBwb3B1cFNlbGVjdG9yLCBmb3JtU3VibWl0Q2FsbGJhY2t9KSB7XG4gICAgc3VwZXIocG9wdXBTZWxlY3Rvcik7XG4gICAgdGhpcy5fcG9wdXBGb3JtID0gdGhpcy5fcG9wdXAucXVlcnlTZWxlY3Rvcihjb25maWcucG9wdXBGb3JtU2VsZWN0b3IpO1xuICAgIHRoaXMuX2lucHV0TGlzdCA9IHRoaXMuX3BvcHVwRm9ybS5xdWVyeVNlbGVjdG9yQWxsKGNvbmZpZy5wb3B1cEZvcm1JbnB1dFNlbGVjdG9yKTtcbiAgICB0aGlzLl9mb3JtVmFsdWVzID0ge307XG4gICAgdGhpcy5fZm9ybVN1Ym1pdENhbGxiYWNrID0gZm9ybVN1Ym1pdENhbGxiYWNrKHRoaXMsIHRoaXMuX2Zvcm1WYWx1ZXMpLmJpbmQodGhpcyk7XG4gICAgdGhpcy5fc3VibWl0QnV0dG9uID0gdGhpcy5fcG9wdXAucXVlcnlTZWxlY3Rvcihjb25maWcucG9wdXBGb3JtU3VibWl0QnV0dG9uU2VsZWN0b3IpO1xuICAgIHRoaXMuX3N1Ym1pdEJ1dHRvbk9yaWdpbmFsVGV4dCA9IHRoaXMuX3N1Ym1pdEJ1dHRvbi50ZXh0Q29udGVudDtcbiAgICB0aGlzLnNldEV2ZW50TGlzdGVuZXJzKCk7XG4gIH1cblxuICAvKipcbiAgICogR2F0aGVycyB0aGUgZGF0YSBmcm9tIGFsbCBmb3JtIGZpZWxkc1xuICAgKi9cbiAgX2dldElucHV0VmFsdWVzKCkge1xuICAgIHRoaXMuX2lucHV0TGlzdC5mb3JFYWNoKGlucHV0ID0+IHRoaXMuX2Zvcm1WYWx1ZXNbaW5wdXQubmFtZV0gPSBpbnB1dC52YWx1ZSk7XG4gIH1cblxuICAvKipcbiAgICogU2V0cyBpbnB1dCB2YWx1ZXMgZm9yIHRoZSBmb3JtXG4gICAqIEBwYXJhbSB7T2JqZWN0fSB2YWx1ZXMgLSB7cHJvcGVydHkxOiBcInZhbHVlMVwiLCBwcm9wZXJ0eTI6IFwidmFsdWUyXCJ9XG4gICAqL1xuICBzZXRJbnB1dFZhbHVlcyh2YWx1ZXMpIHtcbiAgICB0aGlzLl9pbnB1dExpc3QuZm9yRWFjaChpbnB1dCA9PiB7XG4gICAgICBpbnB1dC52YWx1ZSA9IHZhbHVlc1tpbnB1dC5uYW1lXTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXRzIGV2ZW50IGxpc3RlbmVycyBmb3IgdGhlIHBvcHVwXG4gICAqL1xuICBzZXRFdmVudExpc3RlbmVycygpIHtcbiAgICBzdXBlci5zZXRFdmVudExpc3RlbmVycygpO1xuICAgIHRoaXMuX3BvcHVwRm9ybS5hZGRFdmVudExpc3RlbmVyKCdzdWJtaXQnLCAoZXZ0KSA9PiB7XG4gICAgICB0aGlzLl9nZXRJbnB1dFZhbHVlcygpO1xuICAgICAgdGhpcy5fZm9ybVN1Ym1pdENhbGxiYWNrKGV2dCl9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDbG9zZXMgdGhlIHBvcHVwXG4gICAqL1xuICBjbG9zZSgpIHtcbiAgICBzdXBlci5jbG9zZSgpO1xuICAgIHRoaXMuX3BvcHVwRm9ybS5yZXNldCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIE9wZW5zIGEgcG9wdXAgd2l0aCBhIGN1c3RvbSBhY3Rpb25cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gY3VzdG9tT3BlbkNhbGxiYWNrXG4gICAqL1xuICBvcGVuKGN1c3RvbU9wZW5DYWxsYmFjaykge1xuICAgIGN1c3RvbU9wZW5DYWxsYmFjaygpO1xuICAgIHN1cGVyLm9wZW4oKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIHBvcHVwIGZvcm1cbiAgICogQHJldHVybnMge0hUTUxFbGVtZW50fVxuICAgKi9cbiAgIGdldEZvcm0oKSB7XG4gICAgcmV0dXJuIHRoaXMuX3BvcHVwRm9ybTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTd2l0Y2hlcyBmb3JtIHN1Ym1pdCBidXR0b24gdGV4dCBiZXR3ZWVuIG9yaWdpbmFsIGFuZCBzYXZpbmdcbiAgICogQHBhcmFtIHtCb29sZWFufSBzYXZpbmdcbiAgICovXG4gIHNldFN1Ym1pdEJ1dHRvblNhdmluZ1RleHQoc2F2aW5nKSB7XG4gICAgdGhpcy5fc3VibWl0QnV0dG9uLnRleHRDb250ZW50ID0gc2F2aW5nID8gY29uZmlnLnBvcHVwV2l0aEZvcm1TYXZpbmdUZXh0IDogdGhpcy5fc3VibWl0QnV0dG9uT3JpZ2luYWxUZXh0O1xuICB9XG59XG4iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBGb3JtVmFsaWRhdG9yIHtcbiAgY29uc3RydWN0b3IoY29uZmlnLCBmb3JtKSB7XG4gICAgdGhpcy5fY29uZmlnID0gY29uZmlnO1xuICAgIHRoaXMuX2Zvcm0gPSBmb3JtO1xuICAgIHRoaXMuX3N1Ym1pdEJ1dHRvbiA9IHRoaXMuX2Zvcm0ucXVlcnlTZWxlY3Rvcih0aGlzLl9jb25maWcucG9wdXBGb3JtU3VibWl0QnV0dG9uU2VsZWN0b3IpO1xuICAgIHRoaXMuX2lucHV0cyA9IEFycmF5LmZyb20odGhpcy5fZm9ybS5xdWVyeVNlbGVjdG9yQWxsKHRoaXMuX2NvbmZpZy5wb3B1cEZvcm1JbnB1dFNlbGVjdG9yKSk7XG4gICAgdGhpcy5fZXJyb3JzID0gdGhpcy5faW5wdXRzLm1hcChpbnB1dCA9PiAgdGhpcy5fZm9ybS5xdWVyeVNlbGVjdG9yKGAuJHtpbnB1dC5pZH0tZXJyb3JgKSk7XG4gIH1cblxuICAvKipcbiAgICogRGlzYWJsZXMgZm9ybSBzdWJtaXQgYnV0dG9uXG4gICAqL1xuICBfZGlzYWJsZVN1Ym1pdEJ1dHRvbiA9ICgpID0+IHtcbiAgICB0aGlzLl9zdWJtaXRCdXR0b24uc2V0QXR0cmlidXRlKCdkaXNhYmxlZCcsICdkaXNhYmxlZCcpO1xuICAgIHRoaXMuX3N1Ym1pdEJ1dHRvbi5jbGFzc0xpc3QucmVtb3ZlKC4uLnRoaXMuX2NvbmZpZy50cmFuc3BhcmVudE11Y2hNb3JlKTtcbiAgICB0aGlzLl9zdWJtaXRCdXR0b24uY2xhc3NMaXN0LmFkZCh0aGlzLl9jb25maWcuc3VibWl0QnV0dG9uRGlzYWJsZWQpO1xuICB9XG5cbiAgLyoqXG4gICAqIEVuYWJsZXMgZm9ybSBzdWJtaXQgYnV0dG9uXG4gICAqL1xuICBfZW5hYmxlU3VibWl0QnV0dG9uID0gKCkgPT4ge1xuICAgIHRoaXMuX3N1Ym1pdEJ1dHRvbi5jbGFzc0xpc3QucmVtb3ZlKHRoaXMuX2NvbmZpZy5zdWJtaXRCdXR0b25EaXNhYmxlZCk7XG4gICAgdGhpcy5fc3VibWl0QnV0dG9uLmNsYXNzTGlzdC5hZGQoLi4udGhpcy5fY29uZmlnLnRyYW5zcGFyZW50TXVjaE1vcmUpO1xuICAgIHRoaXMuX3N1Ym1pdEJ1dHRvbi5yZW1vdmVBdHRyaWJ1dGUoJ2Rpc2FibGVkJyk7XG4gIH1cblxuICAvKipcbiAgICogU2hvd3MgZXJyb3IgZm9yIGZvcm0gaW5wdXQgZmllbGRcbiAgICogQHBhcmFtIHtIVE1MRWxlbWVudH0gZXJyb3JFbGVtZW50XG4gICAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGlucHV0XG4gICAqL1xuICBfc2hvd0Vycm9yID0gKGVycm9yRWxlbWVudCwgaW5wdXQpID0+IHtcbiAgICBlcnJvckVsZW1lbnQudGV4dENvbnRlbnQgPSBpbnB1dC52YWxpZGF0aW9uTWVzc2FnZTtcbiAgICBpbnB1dC5jbGFzc0xpc3QuYWRkKHRoaXMuX2NvbmZpZy5pbnB1dEZpZWxkRXJyb3IpO1xuICAgIGVycm9yRWxlbWVudC5jbGFzc0xpc3QuYWRkKHRoaXMuX2NvbmZpZy5pbnB1dEVycm9yTWVzc2FnZUFjdGl2ZSk7XG4gIH1cblxuICAvKipcbiAgICogSGlkZXMgZXJyb3IgZm9yIGZvcm0gaW5wdXQgZmllbGRcbiAgICogQHBhcmFtIHtIVE1MRWxlbWVudH0gZXJyb3JFbGVtZW50XG4gICAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGlucHV0XG4gICAqL1xuICBfaGlkZUVycm9yID0gKGVycm9yRWxlbWVudCwgaW5wdXQpID0+IHtcbiAgICBpbnB1dC5jbGFzc0xpc3QucmVtb3ZlKHRoaXMuX2NvbmZpZy5pbnB1dEZpZWxkRXJyb3IpO1xuICAgIGVycm9yRWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKHRoaXMuX2NvbmZpZy5pbnB1dEVycm9yTWVzc2FnZUFjdGl2ZSk7XG4gICAgZXJyb3JFbGVtZW50LnRleHRDb250ZW50ID0gXCJcIjtcbiAgfVxuXG4gIC8qKlxuICAgKiBIaWRlcyBhbGwgZXJyb3JzIGZvciB0aGUgZm9ybVxuICAgKi9cbiAgX2hpZGVFcnJvckFsbCA9ICgpID0+IHtcbiAgICB0aGlzLl9pbnB1dHMuZm9yRWFjaCgoaW5wdXQsIGluZGV4KSA9PiB7XG4gICAgICB0aGlzLl9oaWRlRXJyb3IodGhpcy5fZXJyb3JzW2luZGV4XSwgaW5wdXQpO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrcyBpZiBpbnB1dCBmaWVsZCBpcyB2YWxpZCBhY2NvcmRpbmcgdG8gSFRNTCB2YWxpZGF0aW9uIGNyaXRlcmlhXG4gICAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGlucHV0XG4gICAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGVycm9yRWxlbWVudFxuICAgKi9cbiAgX2NoZWNrSW5wdXRWYWxpZGl0eSA9IChpbnB1dCwgZXJyb3JFbGVtZW50KSA9PiB7XG4gICAgaWYgKCFpbnB1dC52YWxpZGl0eS52YWxpZClcbiAgICAgIHRoaXMuX3Nob3dFcnJvcihlcnJvckVsZW1lbnQsIGlucHV0KTtcbiAgICBlbHNlXG4gICAgICB0aGlzLl9oaWRlRXJyb3IoZXJyb3JFbGVtZW50LCBpbnB1dCk7XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2tzIGlmIGFsbCBpbnB1dHMgYXJlIHZhbGlkXG4gICAqL1xuICBfY2hlY2tJbnB1dFZhbGlkaXR5QWxsID0gKCkgPT4ge1xuICAgIHJldHVybiB0aGlzLl9pbnB1dHMuZXZlcnkoaW5wdXQgPT4gaW5wdXQudmFsaWRpdHkudmFsaWQpO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldHMgZm9ybSBzdWJtaXQgYnV0dG9uIHN0YXRlIGRlcGVuZGluZyBvbiB2YWxpZGl0eSBvZiBpdHMgaW5wdXQgZmllbGRzXG4gICAqL1xuICBfc2V0U3VibWl0U3RhdGUgPSAoKSA9PiB7XG4gICAgaWYgKCF0aGlzLl9jaGVja0lucHV0VmFsaWRpdHlBbGwoKSlcbiAgICAgIHRoaXMuX2Rpc2FibGVTdWJtaXRCdXR0b24oKTtcbiAgICBlbHNlXG4gICAgICB0aGlzLl9lbmFibGVTdWJtaXRCdXR0b24oKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDbGVhcnMgdGhlIGZvcm0gdmFsaWRhdGlvblxuICAgKi9cbiAgY2xlYXJGb3JtVmFsaWRhdGlvbiA9ICgpID0+IHtcbiAgICB0aGlzLl9oaWRlRXJyb3JBbGwoKTtcbiAgICB0aGlzLl9kaXNhYmxlU3VibWl0QnV0dG9uKCk7XG4gIH1cblxuICAvKipcbiAgICogRW5hYmxlcyBjdXN0b20gSFRNTC9DU1MvSlMgdmFsaWRhdGlvbiBmb3IgdGhlIGZvcm1cbiAgICovXG4gIGVuYWJsZVZhbGlkYXRpb24gPSAoKSA9PiB7XG4gICAgdGhpcy5faW5wdXRzLmZvckVhY2goaW5wdXQgPT4ge1xuICAgICAgY29uc3QgZXJyb3JFbGVtZW50ID0gdGhpcy5fZm9ybS5xdWVyeVNlbGVjdG9yKGAuJHtpbnB1dC5pZH0tZXJyb3JgKTtcbiAgICAgIGlucHV0LmFkZEV2ZW50TGlzdGVuZXIoJ2lucHV0JywgKGV2dCkgPT4ge1xuICAgICAgICB0aGlzLl9jaGVja0lucHV0VmFsaWRpdHkoZXZ0LnRhcmdldCwgZXJyb3JFbGVtZW50KTtcbiAgICAgICAgdGhpcy5fc2V0U3VibWl0U3RhdGUoKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG59XG4iLCJpbXBvcnQge2NvbmZpZ30gZnJvbSAnLi4vdXRpbHMvY29uc3RhbnRzLmpzJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVXNlckluZm8ge1xuICBjb25zdHJ1Y3RvcihpbmZvKSB7XG4gICAgdGhpcy5fcHJvZmlsZU5hbWUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGluZm8ucHJvZmlsZU5hbWVTZWxlY3Rvcik7XG4gICAgdGhpcy5fcHJvZmlsZURlc2NyaXB0aW9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihpbmZvLnByb2ZpbGVEZXNjcmlwdGlvblNlbGVjdG9yKTtcbiAgICB0aGlzLl9hdmF0YXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGluZm8ucHJvZmlsZUF2YXRhclNlbGVjdG9yKTtcbiAgICB0aGlzLl9pZCA9IGluZm8uX2lkO1xuICAgIHRoaXMuc2V0VXNlckF2YXRhcihpbmZvLmF2YXRhcik7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBjdXJyZW50IHRleHQgY29udGVudCBvZiB1c2VyIGluZm9ybWF0aW9uXG4gICAqIEByZXR1cm5zIHtPYmplY3R9IC0ge1tjb25maWcucHJvZmlsZUlucHV0TmFtZU5hbWVdOiBcInZhbHVlXCIsIFtjb25maWcucHJvZmlsZUlucHV0RGVzY3JpcHRpb25OYW1lXTogXCJ2YWx1ZVwifVxuICAgKi9cbiAgZ2V0VXNlckluZm8oKSB7XG4gICAgcmV0dXJuIHtbY29uZmlnLnByb2ZpbGVJbnB1dE5hbWVOYW1lXTogdGhpcy5fcHJvZmlsZU5hbWUudGV4dENvbnRlbnQsXG4gICAgICAgICAgICBbY29uZmlnLnByb2ZpbGVJbnB1dERlc2NyaXB0aW9uTmFtZV06IHRoaXMuX3Byb2ZpbGVEZXNjcmlwdGlvbi50ZXh0Q29udGVudCxcbiAgICAgICAgICAgIHVzZXJJZDogdGhpcy5faWR9O1xuICB9XG5cbiAgLyoqXG4gICAqIFdyaXRlcyB1c2VyIGluZm9ybWF0aW9uIHRleHQgdG8gdGhlIHBhZ2VcbiAgICogQHBhcmFtIHtPYmplY3R9IGRhdGEgLSB7bmFtZTogXCJcIiwgZGVzY3JpcHRpb246IFwiXCJ9XG4gICAqL1xuICBzZXRVc2VySW5mbyhkYXRhKSB7XG4gICAgdGhpcy5fcHJvZmlsZU5hbWUudGV4dENvbnRlbnQgPSBkYXRhLm5hbWU7XG4gICAgdGhpcy5fcHJvZmlsZURlc2NyaXB0aW9uLnRleHRDb250ZW50ID0gZGF0YS5kZXNjcmlwdGlvbjtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXRzIHRoZSBhZGRyZXNzIG9mIHVzZXIgcGhvdG9cbiAgICogQHBhcmFtIHtTdHJpbmd9IHVybFxuICAgKi9cbiAgc2V0VXNlckF2YXRhcih1cmwpIHtcbiAgICB0aGlzLl9hdmF0YXIuc3JjID0gdXJsO1xuICB9XG59XG4iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBBcGkge1xuICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG4gICAgdGhpcy5iYXNlVXJsID0gb3B0aW9ucy5iYXNlVXJsO1xuICAgIHRoaXMuaGVhZGVycyA9IG9wdGlvbnMuaGVhZGVycztcbiAgfVxuXG4gIC8qKlxuICAgKiBTZW5kcyBhIG5ldHdvcmsgcmVxdWVzdCB3aXRoIGdpdmVuIHBhcmFtZXRlcnNcbiAgICogQHBhcmFtIHtTdHJpbmd9IHBhdGggLSB0aGUgbGFzdCBwYXJ0IG9mIGZ1bGwgdXJsXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXRob2QgLSAnR0VUIHx8ICdQT1NUJyB8fCAnUEFUQ0gnIHx8ICdQVVQnIHx8ICdERUxFVEUnXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBib2R5IC0gaXMgYWRkZWQgd2l0aCBzb21lIG1ldGhvZHNcbiAgICogQHJldHVybnMge1Byb21pc2V9XG4gICAqL1xuICBfZmV0Y2hQYXRoKHBhdGgsIG1ldGhvZCwgYm9keSA9IHt9KSB7XG4gICAgY29uc3QgZmV0Y2hPYmplY3QgPSB7XG4gICAgICBtZXRob2Q6IG1ldGhvZCxcbiAgICAgIGhlYWRlcnM6IHRoaXMuaGVhZGVycyxcbiAgICB9XG4gICAgaWYgKG1ldGhvZCA9PT0gJ1BPU1QnIHx8IG1ldGhvZCA9PT0gJ1BBVENIJylcbiAgICAgIGZldGNoT2JqZWN0Wydib2R5J10gPSBKU09OLnN0cmluZ2lmeShib2R5KTtcblxuICAgIHJldHVybiBmZXRjaChgJHt0aGlzLmJhc2VVcmx9JHtwYXRofWAsIGZldGNoT2JqZWN0KVxuICAgIC50aGVuKHJlcyA9PiB7XG4gICAgICBpZiAocmVzLm9rKVxuICAgICAgICByZXR1cm4gcmVzLmpzb24oKTtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChgRXJyb3I6ICR7cmVzLnN0YXR1c31gKTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIHVzZXIgcHJvZmlsZSBpbmZvcm1hdGlvblxuICAgKiBAcmV0dXJucyB7UHJvbWlzZX1cbiAgICovXG4gIGdldFVzZXJJbmZvKCkge1xuICAgIHJldHVybiB0aGlzLl9mZXRjaFBhdGgoJ3VzZXJzL21lJywgJ0dFVCcpO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldHMgdXNlciBwcm9maWxlIGluZm9ybWF0aW9uXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgLSB7bmFtZSwgYWJvdXR9XG4gICAqIEByZXR1cm5zIHtQcm9taXNlfVxuICAgKi9cbiAgc2V0VXNlckluZm8oeyBuYW1lLCBhYm91dCB9KSB7XG4gICAgcmV0dXJuIHRoaXMuX2ZldGNoUGF0aCgndXNlcnMvbWUnLCAnUEFUQ0gnLCB7bmFtZTogbmFtZSwgYWJvdXQ6IGFib3V0fSk7XG4gIH1cblxuICAvKipcbiAgICogVHJpZXMgdG8gc2F2ZSBhIGxpbmsgdG8gYSBuZXcgdXNlciBhdmF0YXIgdG8gdGhlIHNlcnZlclxuICAgKiBAcGFyYW0ge1N0cmluZ30gdXJsXG4gICAqIEByZXR1cm5zIHtQcm9taXNlfVxuICAgKi9cbiAgc2V0VXNlckF2YXRhcih1cmwpIHtcbiAgICByZXR1cm4gdGhpcy5fZmV0Y2hQYXRoKCd1c2Vycy9tZS9hdmF0YXInLCAnUEFUQ0gnLCB7YXZhdGFyOiB1cmx9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBMb2FkcyBjYXJkcyBmcm9tIHRoZSBzZXJ2ZXJcbiAgICogQHJldHVybnMge1Byb21pc2V9XG4gICAqL1xuICBnZXRJbml0aWFsQ2FyZHMoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2ZldGNoUGF0aCgnY2FyZHMnLCAnR0VUJyk7XG4gIH1cblxuICAvKipcbiAgICogQWRkcyBhIG5ldyBjYXJkIHRvIHRoZSBzZXJ2ZXJcbiAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCAtIHtuYW1lLCBsaW5rfVxuICAgKiBAcmV0dXJucyB7UHJvbWlzZX0gLSBjb250YWlucyBuZXcgY2FyZCBkYXRhXG4gICAqL1xuICBhZGRDYXJkKHsgbmFtZSwgbGluayB9KSB7XG4gICAgcmV0dXJuIHRoaXMuX2ZldGNoUGF0aCgnY2FyZHMnLCAnUE9TVCcsIHtuYW1lOiBuYW1lLCBsaW5rOiBsaW5rfSk7XG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlcyBjYXJkIGZyb20gc2VydmVyXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBjYXJkSWRcbiAgICogQHJldHVybnMge1Byb21pc2V9XG4gICAqL1xuICBkZWxldGVDYXJkKGNhcmRJZCkge1xuICAgIHJldHVybiB0aGlzLl9mZXRjaFBhdGgoYGNhcmRzLyR7Y2FyZElkfWAsICdERUxFVEUnKVxuICB9XG5cbiAgLyoqXG4gICAqIEFkZHMgYSBsaWtlIHRvIGEgY2FyZFxuICAgKiBAcGFyYW0ge1N0cmluZ30gY2FyZElkXG4gICAqIEByZXR1cm5zIHtQcm9taXNlfVxuICAgKi9cbiAgbGlrZUNhcmQoY2FyZElkKSB7XG4gICAgcmV0dXJuIHRoaXMuX2ZldGNoUGF0aChgY2FyZHMvbGlrZXMvJHtjYXJkSWR9YCwgJ1BVVCcpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlbW92ZXMgYSBjYXJkJ3MgbGlrZSBmcm9tIHRoZSBzZXJ2ZXJcbiAgICogQHBhcmFtIHtTdHJpbmd9IGNhcmRJZFxuICAgKiBAcmV0dXJucyB7UHJvbWlzZX1cbiAgICovXG4gIHVubGlrZUNhcmQoY2FyZElkKSB7XG4gICAgcmV0dXJuIHRoaXMuX2ZldGNoUGF0aChgY2FyZHMvbGlrZXMvJHtjYXJkSWR9YCwgJ0RFTEVURScpO1xuICB9XG59XG4iLCJpbXBvcnQgUG9wdXAgZnJvbSAnLi9Qb3B1cC5qcyc7XG5pbXBvcnQge2NvbmZpZ30gZnJvbSAnLi4vdXRpbHMvY29uc3RhbnRzLmpzJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUG9wdXBDb25maXJtIGV4dGVuZHMgUG9wdXAge1xuICBjb25zdHJ1Y3Rvcihwb3B1cFNlbGVjdG9yKSB7XG4gICAgc3VwZXIocG9wdXBTZWxlY3Rvcik7XG4gICAgdGhpcy5fcG9wdXBGb3JtID0gdGhpcy5fcG9wdXAucXVlcnlTZWxlY3Rvcihjb25maWcucG9wdXBGb3JtU2VsZWN0b3IpO1xuICAgIHRoaXMuX3N1Ym1pdEhhbmRsZXIgPSBudWxsO1xuICAgIHRoaXMuc2V0RXZlbnRMaXN0ZW5lcnMoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXRzIHN1Ym1pdCBidXR0b24gaGFuZGxlclxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayAtIGV2b2tlZCBvbiBmb3JtIHN1Ym1pdFxuICAgKi9cbiAgc2V0U3VibWl0SGFuZGxlcihjYWxsYmFjaykge1xuICAgIHRoaXMuX3N1Ym1pdEhhbmRsZXIgPSBjYWxsYmFjaztcbiAgfVxuXG4gIC8qKlxuICAgKiBDbG9zZXMgdGhlIHBvcHVwXG4gICAqL1xuICBjbG9zZSgpIHtcbiAgICBzdXBlci5jbG9zZSgpO1xuICAgIHRoaXMuX3N1Ym1pdEhhbmRsZXIgPSBudWxsO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldHMgZXZlbnQgbGlzdGVuZXJzIGZvciB0aGUgcG9wdXBcbiAgICovXG4gIHNldEV2ZW50TGlzdGVuZXJzKCkge1xuICAgIHN1cGVyLnNldEV2ZW50TGlzdGVuZXJzKCk7XG4gICAgdGhpcy5fcG9wdXBGb3JtLmFkZEV2ZW50TGlzdGVuZXIoJ3N1Ym1pdCcsIChldnQpID0+IHRoaXMuX3N1Ym1pdEhhbmRsZXIoZXZ0KSk7XG4gIH1cbn1cbiIsImltcG9ydCB7Q2FyZH0gZnJvbSAnLi4vY29tcG9uZW50cy9DYXJkLmpzJztcbmltcG9ydCB7Y29uZmlnfSBmcm9tICcuLi91dGlscy9jb25zdGFudHMuanMnO1xuaW1wb3J0IFNlY3Rpb24gZnJvbSAnLi4vY29tcG9uZW50cy9TZWN0aW9uLmpzJztcbmltcG9ydCBQb3B1cFdpdGhJbWFnZSBmcm9tICcuLi9jb21wb25lbnRzL1BvcHVwV2l0aEltYWdlLmpzJztcbmltcG9ydCBQb3B1cFdpdGhGb3JtIGZyb20gJy4uL2NvbXBvbmVudHMvUG9wdXBXaXRoRm9ybS5qcyc7XG5pbXBvcnQgRm9ybVZhbGlkYXRvciBmcm9tICcuLi9jb21wb25lbnRzL0Zvcm1WYWxpZGF0b3IuanMnO1xuaW1wb3J0IFVzZXJJbmZvIGZyb20gJy4uL2NvbXBvbmVudHMvVXNlckluZm8uanMnO1xuaW1wb3J0ICcuL2luZGV4LmNzcyc7XG5pbXBvcnQgQXBpIGZyb20gJy4uL2NvbXBvbmVudHMvQXBpLmpzJztcbmltcG9ydCBQb3B1cENvbmZpcm0gZnJvbSAnLi4vY29tcG9uZW50cy9Qb3B1cENvbmZpcm0uanMnO1xuXG4vKipcbiAqIEV2ZW50IGxpc3RlbmVyIGhhbmRsZXIgZm9yIGNhcmQgcGhvdG9cbiAqL1xuZnVuY3Rpb24gaGFuZGxlQ2FyZENsaWNrIChwb3B1cCkge1xuICByZXR1cm4gZnVuY3Rpb24gKHBob3RvQXR0cmlidXRlcywgcGxhY2VOYW1lVGV4dCkge1xuICAgICAgICAgICByZXR1cm4gKCkgPT4ge3BvcHVwLm9wZW4ocGhvdG9BdHRyaWJ1dGVzLCBwbGFjZU5hbWVUZXh0KX1cbiAgICAgICAgIH1cbn07XG5cbi8qKlxuICogQ3JlYXRlcyBhIGNhbGxiYWNrIGZvciBjYXJkIHJlbW92YWxcbiAqIEBwYXJhbSB7QXBpfSBhcGlcbiAqIEBwYXJhbSB7UG9wdXBDb25maXJtfSBkZWxldGVDb25maXJtUG9wdXBcbiAqIEByZXR1cm5zIHtjYXJkRGVsZXRlQ2FsbGJhY2t9XG4gKi9cbmZ1bmN0aW9uIG1ha2VDYXJkRGVsZXRlQ2FsbGJhY2soYXBpLCBkZWxldGVDb25maXJtUG9wdXApIHtcbiAgLyoqXG4gICAqIERlbGV0ZXMgYSBjYXJkIGZyb20gdGhlIHNlcnZlciBhbmQgZnJvbSB0aGUgcGFnZVxuICAgKiBAY2FsbGJhY2sgY2FyZERlbGV0ZUNhbGxiYWNrXG4gICAqIEBwYXJhbSB7Q2FyZH0gY2FyZFxuICAgKiBAcGFyYW0ge1N0cmluZ30gY2FyZElkXG4gICAqL1xuICBjb25zdCBjYXJkRGVsZXRlQ2FsbGJhY2sgPSAoY2FyZCwgY2FyZElkKSA9PiB7XG4gICAgZGVsZXRlQ29uZmlybVBvcHVwLnNldFN1Ym1pdEhhbmRsZXIoKGV2dCkgPT4ge1xuICAgICAgZXZ0LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICBhcGkuZGVsZXRlQ2FyZChjYXJkSWQpXG4gICAgICAudGhlbihyZXMgPT4ge1xuICAgICAgICBjYXJkLmRlbGV0ZSgpO1xuICAgICAgICBkZWxldGVDb25maXJtUG9wdXAuY2xvc2UoKTtcbiAgICAgIH0pXG4gICAgICAuY2F0Y2goZXJyID0+IGNvbnNvbGUubG9nKGVycikpXG4gICAgICAuZmluYWxseShkZWxldGVDb25maXJtUG9wdXAuc2V0U3VibWl0SGFuZGxlcihudWxsKSk7XG4gICAgfSk7XG4gICAgZGVsZXRlQ29uZmlybVBvcHVwLm9wZW4oKTtcbiAgfTtcbiAgcmV0dXJuIGNhcmREZWxldGVDYWxsYmFjaztcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgY2FsbGJhY2sgZm9yIGxpa2UgZnVuY3Rpb25hbGl0eVxuICogQHBhcmFtIHtBcGl9IGFwaVxuICogQHJldHVybnMge2NhcmRMaWtlQ2FsbGJhY2t9XG4gKi9cbmZ1bmN0aW9uIG1ha2VDYXJkTGlrZUNhbGxiYWNrKGFwaSkge1xuICAvKipcbiAgICogTGlrZXMgYSBjYXJkIG9uIHRoZSBzZXJ2ZXIgYW5kIG9uIHRoZSBwYWdlXG4gICAqIEBjYWxsYmFjayBjYXJkTGlrZUNhbGxiYWNrXG4gICAqIEBwYXJhbSB7Q2FyZH0gY2FyZFxuICAgKiBAcGFyYW0ge1N0cmluZ30gY2FyZElkXG4gICAqIEBwYXJhbSB7Qm9vbGVhbn0gbGlrZWRcbiAgICovXG4gIGNvbnN0IGNhcmRMaWtlQ2FsbGJhY2sgPSAoY2FyZCwgY2FyZElkLCBsaWtlZCkgPT4ge1xuICAgIGNvbnN0IGFwaUNhbGxSZXN1bHQgPSBsaWtlZCA/IGFwaS51bmxpa2VDYXJkKGNhcmRJZCkgOiBhcGkubGlrZUNhcmQoY2FyZElkKTtcbiAgICBhcGlDYWxsUmVzdWx0XG4gICAgLnRoZW4ocmVzID0+IHtcbiAgICAgIGNhcmQudG9nZ2xlTGlrZUJ1dHRvbigpO1xuICAgICAgY2FyZC5zZXRMaWtlcyhyZXMubGlrZXMpO1xuICAgIH0pXG4gICAgLmNhdGNoKGVyciA9PiBjb25zb2xlLmxvZyhlcnIpKTtcbiAgfTtcbiAgcmV0dXJuIGNhcmRMaWtlQ2FsbGJhY2s7XG59XG5cbi8qKlxuICogQWRkcyBhIHBsYWNlIGNhcmQgdG8gdGhlIHBhZ2VcbiAqIEBwYXJhbSB7T2JqZWN0fSBjYXJkRGF0YSAtIHtuYW1lOiBcIlwiLCBsaW5rOiBcIlwiLCAuLi59XG4gKiBAcGFyYW0ge1NlY3Rpb259IGRlc3RpbmF0aW9uU2VjdGlvblxuICovXG5mdW5jdGlvbiBhZGRQbGFjZUNhcmQoY2FyZERhdGEsIGRlc3RpbmF0aW9uU2VjdGlvbiwgYXBpLCB1c2VySW5mbywgZGVsZXRlQ29uZmlybVBvcHVwKSB7XG4gIGNhcmREYXRhLnRlbXBsYXRlU2VsZWN0b3IgPSBjb25maWcuY2FyZFRlbXBsYXRlU2VsZWN0b3I7XG4gIGNhcmREYXRhLmhhbmRsZUNhcmRDbGljayA9IGhhbmRsZUNhcmRDbGljayhwaG90b1BvcHVwKTtcbiAgY2FyZERhdGEuY2FyZERlbGV0ZUNhbGxiYWNrID0gbWFrZUNhcmREZWxldGVDYWxsYmFjayhhcGksIGRlbGV0ZUNvbmZpcm1Qb3B1cCk7XG4gIGNhcmREYXRhLmNhcmRMaWtlQ2FsbGJhY2sgPSBtYWtlQ2FyZExpa2VDYWxsYmFjayhhcGkpO1xuICBjYXJkRGF0YS51c2VySWQgPSB1c2VySW5mby5nZXRVc2VySW5mbygpLnVzZXJJZDtcbiAgY29uc3QgcGxhY2VDYXJkID0gbmV3IENhcmQoY2FyZERhdGEpO1xuICBkZXN0aW5hdGlvblNlY3Rpb24uYWRkSXRlbShwbGFjZUNhcmQuZ2VuZXJhdGVDYXJkKCkpO1xufVxuXG5jb25zdCBwaG90b1BvcHVwID0gbmV3IFBvcHVwV2l0aEltYWdlKGNvbmZpZy5waG90b1BvcHVwVGVtcGxhdGVTZWxlY3Rvcik7XG5cbi8qKlxuICogQ3JlYXRlcyBhIGZvcm0gc3VibWl0IGhhbmRsZXIgd2l0aCBhIGdpdmVuIGNhbGxiYWNrXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayAtIHJ1bnMgaW5zaWRlIG9mIHRoZSBoYW5kbGVyXG4gKiBAcmV0dXJucyB7Zm9ybVN1Ym1pdEhhbmRsZXJ9XG4gKi9cbmZ1bmN0aW9uIG1ha2VGb3JtU3VibWl0SGFuZGxlcihjYWxsYmFjaykge1xuICAvKipcbiAgICogQ3JlYXRlcyBhIGZvcm0gc3VibWl0IGhhbmRsZXIgd2l0aCB0aGUgZ2l2ZW4gcG9wdXAgYW5kIGZvcm0gZGF0YVxuICAgKiBAY2FsbGJhY2sgZm9ybVN1Ym1pdEhhbmRsZXJcbiAgICogQHBhcmFtIHtQb3B1cFdpdGhGb3JtfSBwb3B1cFxuICAgKiBAcGFyYW0ge09iamVjdH0gZm9ybURhdGEgLSB7cHJvcGVydHkxOiBcInZhbHVlMVwiLCBwcm9wZXJ0eTI6IFwidmFsdWUyXCJ9XG4gICAqIEByZXR1cm5zXG4gICAqL1xuICBjb25zdCBoYW5kbGVyID0gZnVuY3Rpb24gZm9ybVN1Ym1pdEhhbmRsZXIgKHBvcHVwLCBmb3JtRGF0YSkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoZXZ0KSB7XG4gICAgICBldnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIGNhbGxiYWNrKHBvcHVwLCBmb3JtRGF0YSk7XG4gICAgfVxuICB9XG4gIHJldHVybiBoYW5kbGVyO1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBmb3JtIHN1Ym1pdCBjYWxsYmFjayBmb3IgdXNlIGluIG1ha2VGb3JtU3VibWl0SGFuZGxlclxuICogQHBhcmFtIHtGdW5jdGlvbn0gYXBpQ2FsbGJhY2sgLSAoZm9ybURhdGEpID0+IGFwaS5tZXRob2QoLi4uKSAtIHJldHVybnMgYSBwcm9taXNlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSB0aGVuQ2FsbGJhY2sgLSAoZm9ybURhdGEsIHJlc3VsdCkgPT4gey4uLn0gLSByZXR1cm5zIG5vdGhpbmdcbiAqIEByZXR1cm5zIHtmb3JtU3VibWl0Q2FsbGJhY2t9IGZvcm0gc3VibWl0IGNhbGxiYWNrXG4gKi9cbmZ1bmN0aW9uIG1ha2VGb3JtU3VibWl0Q2FsbGJhY2soYXBpQ2FsbGJhY2ssIHRoZW5DYWxsYmFjaykge1xuICAvKipcbiAgICogSXMgY2FsbGVkIG9uIGZvcm0gc3VibWl0IGluIGEgcG9wdXBcbiAgICogQGNhbGxiYWNrIGZvcm1TdWJtaXRDYWxsYmFja1xuICAgKiBAcGFyYW0ge1BvcHVwV2l0aEZvcm19IHBvcHVwXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBmb3JtRGF0YSAtIHtwcm9wZXJ0eTE6IFwidmFsdWUxXCIsIHByb3BlcnR5MjogXCJ2YWx1ZTJcIn1cbiAgICovXG4gIGNvbnN0IGZvcm1TdWJtaXRDYWxsYmFjayA9IChwb3B1cCwgZm9ybURhdGEpID0+IHtcbiAgICBwb3B1cC5zZXRTdWJtaXRCdXR0b25TYXZpbmdUZXh0KHRydWUpO1xuICAgIGFwaUNhbGxiYWNrKGZvcm1EYXRhKVxuICAgIC50aGVuKHJlc3VsdCA9PiB7XG4gICAgICB0aGVuQ2FsbGJhY2soZm9ybURhdGEsIHJlc3VsdCk7XG4gICAgICBwb3B1cC5jbG9zZSgpO1xuICAgIH0pXG4gICAgLmNhdGNoKGVyciA9PiBjb25zb2xlLmxvZyhlcnIpKVxuICAgIC5maW5hbGx5KCgpID0+IHtwb3B1cC5zZXRTdWJtaXRCdXR0b25TYXZpbmdUZXh0KGZhbHNlKX0pO1xuICB9XG4gIHJldHVybiBmb3JtU3VibWl0Q2FsbGJhY2s7XG59XG5cbi8qKlxuICogQ3JlYXRlcyBlbmFibGVkIGZvcm0gdmFsaWRhdG9yIGZvciBhIGdpdmVuIGZvcm1cbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGZvcm1cbiAqIEByZXR1cm5zIHtGb3JtVmFsaWRhdG9yfVxuICovXG5mdW5jdGlvbiBtYWtlRW5hYmxlZFZhbGlkYXRvcihmb3JtKSB7XG4gIGNvbnN0IHZhbGlkYXRvciA9IG5ldyBGb3JtVmFsaWRhdG9yKGNvbmZpZywgZm9ybSk7XG4gIHZhbGlkYXRvci5lbmFibGVWYWxpZGF0aW9uKCk7XG4gIHJldHVybiB2YWxpZGF0b3I7XG59XG5cbi8vcHJlcGFyZSBhcGkgb2JqZWN0IGZvciB1c2VcbmNvbnN0IGFwaSA9IG5ldyBBcGkoe1xuICBiYXNlVXJsOiAnaHR0cHM6Ly9tZXN0by5ub21vcmVwYXJ0aWVzLmNvL3YxL2NvaG9ydC0yNS8nLFxuICBoZWFkZXJzOiB7XG4gICAgYXV0aG9yaXphdGlvbjogJ2Q4ZDg0YmFjLTMyZDctNDJmOS1hNjIyLWJiZTE0ZjFhYTlmNScsXG4gICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJ1xuICB9XG59KTtcblxuUHJvbWlzZS5hbGwoW2FwaS5nZXRVc2VySW5mbygpLCBhcGkuZ2V0SW5pdGlhbENhcmRzKCldKVxuICAudGhlbigoW2luZm8sIGNhcmRzXSkgPT4ge1xuXG4gICAgLy9zZXQgdXAgcHJvZmlsZSBpbmZvIGxvZ2ljXG4gICAgaW5mby5wcm9maWxlTmFtZVNlbGVjdG9yID0gY29uZmlnLnByb2ZpbGVOYW1lU2VsZWN0b3I7XG4gICAgaW5mby5wcm9maWxlRGVzY3JpcHRpb25TZWxlY3RvciA9IGNvbmZpZy5wcm9maWxlRGVzY3JpcHRpb25TZWxlY3RvcjtcbiAgICBpbmZvLnByb2ZpbGVBdmF0YXJTZWxlY3RvciA9IGNvbmZpZy5wcm9maWxlQXZhdGFyU2VsZWN0b3I7XG4gICAgY29uc3QgcHJvZmlsZUluZm8gPSBuZXcgVXNlckluZm8oaW5mbyk7XG5cbiAgICBwcm9maWxlSW5mby5zZXRVc2VySW5mbyh7IG5hbWU6IGluZm8ubmFtZSwgZGVzY3JpcHRpb246IGluZm8uYWJvdXQgfSk7XG5cbiAgICBjb25zdCBwcm9maWxlRWRpdFN1Ym1pdEhhbmRsZXIgPSBtYWtlRm9ybVN1Ym1pdEhhbmRsZXIoXG4gICAgICAgIG1ha2VGb3JtU3VibWl0Q2FsbGJhY2soXG4gICAgICAgICAgKGZvcm1EYXRhKSA9PiBhcGkuc2V0VXNlckluZm8oeyBuYW1lOiBmb3JtRGF0YVtjb25maWcucHJvZmlsZUlucHV0TmFtZU5hbWVdLCBhYm91dDogZm9ybURhdGFbY29uZmlnLnByb2ZpbGVJbnB1dERlc2NyaXB0aW9uTmFtZV0gfSksXG4gICAgICAgICAgKGZvcm1EYXRhLCByZXN1bHQpID0+IHtwcm9maWxlSW5mby5zZXRVc2VySW5mbyh7IG5hbWU6IGZvcm1EYXRhW2NvbmZpZy5wcm9maWxlSW5wdXROYW1lTmFtZV0sIGRlc2NyaXB0aW9uOiBmb3JtRGF0YVtjb25maWcucHJvZmlsZUlucHV0RGVzY3JpcHRpb25OYW1lXSB9KX1cbiAgICAgICAgKVxuICAgICk7XG5cbiAgICBjb25zdCBwcm9maWxlRWRpdFBvcHVwID0gbmV3IFBvcHVwV2l0aEZvcm0oe1xuICAgICAgcG9wdXBTZWxlY3RvcjogY29uZmlnLnByb2ZpbGVFZGl0UG9wdXBUZW1wbGF0ZVNlbGVjdG9yLFxuICAgICAgZm9ybVN1Ym1pdENhbGxiYWNrOiBwcm9maWxlRWRpdFN1Ym1pdEhhbmRsZXIgfSk7XG5cbiAgICBjb25zdCBwcm9maWxlRWRpdFBvcHVwVmFsaWRhdG9yID0gbWFrZUVuYWJsZWRWYWxpZGF0b3IocHJvZmlsZUVkaXRQb3B1cC5nZXRGb3JtKCkpO1xuICAgIGNvbnN0IHByb2ZpbGVFZGl0QnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnByb2ZpbGVfX2VkaXQtYnV0dG9uJyk7XG4gICAgcHJvZmlsZUVkaXRCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLFxuICAgICAgKCkgPT4gcHJvZmlsZUVkaXRQb3B1cC5vcGVuKFxuICAgICAgICAoKSA9PiB7XG4gICAgICAgICAgcHJvZmlsZUVkaXRQb3B1cFZhbGlkYXRvci5jbGVhckZvcm1WYWxpZGF0aW9uKCk7XG4gICAgICAgICAgcHJvZmlsZUVkaXRQb3B1cC5zZXRJbnB1dFZhbHVlcyhwcm9maWxlSW5mby5nZXRVc2VySW5mbygpKTtcbiAgICAgICAgfVxuICAgICAgKVxuICAgICk7XG5cbiAgICAvL3ByZXAgYXZhdGFyIGVkaXQgbG9naWNcbiAgICBjb25zdCBhdmF0YXJFZGl0U3VibWl0SGFuZGxlciA9IG1ha2VGb3JtU3VibWl0SGFuZGxlcihcbiAgICAgIG1ha2VGb3JtU3VibWl0Q2FsbGJhY2soXG4gICAgICAgIChmb3JtRGF0YSkgPT4gYXBpLnNldFVzZXJBdmF0YXIoZm9ybURhdGFbY29uZmlnLmF2YXRhckVkaXRJbnB1dE5hbWVdKSxcbiAgICAgICAgKGZvcm1EYXRhLCByZXN1bHQpID0+IHtwcm9maWxlSW5mby5zZXRVc2VyQXZhdGFyKGZvcm1EYXRhW2NvbmZpZy5hdmF0YXJFZGl0SW5wdXROYW1lXSl9XG4gICAgICApXG4gICAgKTtcblxuICAgIGNvbnN0IGF2YXRhckVkaXRQb3B1cCA9IG5ldyBQb3B1cFdpdGhGb3JtKHtcbiAgICAgIHBvcHVwU2VsZWN0b3I6IGNvbmZpZy5hdmF0YXJFZGl0UG9wdXBUZW1wbGF0ZVNlbGVjdG9yLFxuICAgICAgZm9ybVN1Ym1pdENhbGxiYWNrOiBhdmF0YXJFZGl0U3VibWl0SGFuZGxlclxuICAgIH0pO1xuXG4gICAgY29uc3QgYXZhdGFyRWRpdFBvcHVwVmFsaWRhdG9yID0gbWFrZUVuYWJsZWRWYWxpZGF0b3IoYXZhdGFyRWRpdFBvcHVwLmdldEZvcm0oKSk7XG4gICAgY29uc3QgYXZhdGFyRWRpdEJ1dHRvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoY29uZmlnLnByb2ZpbGVBdmF0YXJFZGl0QnV0dG9uU2VsZWN0b3IpO1xuICAgIGF2YXRhckVkaXRCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLFxuICAgICAgKCkgPT4gYXZhdGFyRWRpdFBvcHVwLm9wZW4oICgpID0+IGF2YXRhckVkaXRQb3B1cFZhbGlkYXRvci5jbGVhckZvcm1WYWxpZGF0aW9uKCkgKVxuICAgICk7XG5cbiAgICAvL3ByZXBhcmUgY2FyZCBkZWxldGUgcG9wdXBcbiAgICBjb25zdCBjYXJkRGVsZXRlQ29uZmlybVBvcHVwID0gbmV3IFBvcHVwQ29uZmlybShjb25maWcuY2FyZERlbGV0ZUNvbmZpcm1Qb3B1cFRlbXBsYXRlU2VsZWN0b3IpO1xuXG4gICAgLy9kaXNwbGF5IGluaXRpYWwgY2FyZHNcbiAgICBjb25zdCBwbGFjZXNMaXN0ID0gbmV3IFNlY3Rpb24oe1xuICAgICAgaXRlbXM6IGNhcmRzLnJldmVyc2UoKSxcbiAgICAgIHJlbmRlcmVyOiAoaXRlbSkgPT4gYWRkUGxhY2VDYXJkKGl0ZW0sIHBsYWNlc0xpc3QsIGFwaSwgcHJvZmlsZUluZm8sIGNhcmREZWxldGVDb25maXJtUG9wdXApXG4gICAgfSwgYC4ke2NvbmZpZy5wbGFjZXNMaXN0fWApO1xuXG4gICAgcGxhY2VzTGlzdC5yZW5kZXJJdGVtcygpO1xuXG4gICAgLy9zZXQgdXAgY2FyZCBhZGRpdGlvbiBsb2dpY1xuICAgIGNvbnN0IHByb2ZpbGVBZGRTdWJtaXRIYW5kbGVyID0gbWFrZUZvcm1TdWJtaXRIYW5kbGVyKFxuICAgICAgbWFrZUZvcm1TdWJtaXRDYWxsYmFjayhcbiAgICAgICAgKGZvcm1EYXRhKSA9PiBhcGkuYWRkQ2FyZCh7IG5hbWU6IGZvcm1EYXRhW2NvbmZpZy5wbGFjZUlucHV0TmFtZU5hbWVdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGluazogZm9ybURhdGFbY29uZmlnLnBsYWNlSW5wdXRVcmxOYW1lXSB9KSxcbiAgICAgICAgKGZvcm1EYXRhLCByZXN1bHQpID0+IHthZGRQbGFjZUNhcmQocmVzdWx0LCBwbGFjZXNMaXN0LCBhcGksIHByb2ZpbGVJbmZvLCBjYXJkRGVsZXRlQ29uZmlybVBvcHVwKX1cbiAgICAgIClcbiAgICApO1xuXG4gICAgY29uc3QgcHJvZmlsZUFkZFBvcHVwID0gbmV3IFBvcHVwV2l0aEZvcm0oe1xuICAgICAgcG9wdXBTZWxlY3RvcjogY29uZmlnLnByb2ZpbGVBZGRQb3B1cFRlbXBsYXRlU2VsZWN0b3IsXG4gICAgICBmb3JtU3VibWl0Q2FsbGJhY2s6IHByb2ZpbGVBZGRTdWJtaXRIYW5kbGVyIH0pO1xuXG4gICAgY29uc3QgcHJvZmlsZUFkZFBvcHVwVmFsaWRhdG9yID0gbWFrZUVuYWJsZWRWYWxpZGF0b3IocHJvZmlsZUFkZFBvcHVwLmdldEZvcm0oKSk7XG5cbiAgICBjb25zdCBwcm9maWxlQWRkQnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcihjb25maWcucHJvZmlsZUFkZEJ1dHRvblNlbGVjdG9yKTtcbiAgICBwcm9maWxlQWRkQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJyxcbiAgICAgKCkgPT4gcHJvZmlsZUFkZFBvcHVwLm9wZW4oXG4gICAgICAgKCkgPT4gcHJvZmlsZUFkZFBvcHVwVmFsaWRhdG9yLmNsZWFyRm9ybVZhbGlkYXRpb24oKVxuICAgICAgKVxuICAgICk7XG5cbiAgfSlcbiAgLmNhdGNoKGVyciA9PiBjb25zb2xlLmxvZyhlcnIpKTtcblxuXG5cbiJdLCJzb3VyY2VSb290IjoiIn0=